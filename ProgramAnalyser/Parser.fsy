%{
open ProgramAnalyser.Global
open ProgramAnalyser.Utils
open ProgramAnalyser.ParserSupport
open ProgramAnalyser.Objects
%}

// the starting information
%start program
%start randvars

// the lexer tokens
%token < string > ID
%token < System.Int32 > INT
%token < ProgramAnalyser.Global.Numeric > DOUBLE
%token NEWLINE END_BLOCK_COMMENTING EOF SEMI_COLON END  // supports
%token LPAREN RPAREN LBKT RBKT VBAR  // brackets
%token COMMA ASSIGN TILDE HAT  // operator-like symbols
%token PLUS MULTIPLY MINUS  // arithmetic operators
%token ST_SKIP ST_SCORE ST_RETURN ST_WHILE ST_DO ST_OD // built-in statement constructors
%token ST_IF ST_THEN ST_ELSE ST_ELSEIF ST_FI ST_PROB  // built-in statement constructors
%token ST_SAMPLE ST_BREAK
%token TRUE FALSE AND OR GE LE EQ NEQ LANGLE RANGLE  // boolean contructors and operators
%token KW_CONFIG
%token ERROR

%type < ProgramAnalyser.ParserSupport.Program       > program
%type < ProgramAnalyser.ParserSupport.RandomVarList > randvars

%%

program : 
    assignment_list
    LBKT bool_expr RBKT
    ST_WHILE bool_expr ST_DO
      non_loop_statements
    ST_OD SEMI_COLON
    optional_end_score_statement
    optional_if_score_statement
    ST_RETURN ID
    END { mkProgram ($1, $3, $6, $8, $11, $12, Variable $14) }

optional_if_score_statement :
      { None }
  | ST_IF bool_expr ST_THEN
      ST_SCORE LPAREN INT RPAREN
    ST_ELSE
      ST_SCORE LPAREN INT RPAREN
    ST_FI SEMI_COLON {
      shapeOptionalIfScoreStatement $2 $6 $11
  }

optional_end_score_statement :
      { None }
  | ST_SCORE LPAREN distribution COMMA arith_expr RPAREN SEMI_COLON { Some (ScoreDist ($3, $5)) }
  | ST_SCORE LPAREN arith_expr RPAREN SEMI_COLON { Some (ScoreArith $3) }

distribution :
    ID LPAREN dist_arg_list RPAREN { toDistribution $1 $3 }
  | ID LPAREN RPAREN { toDistribution $1 [] }

assignment_list :
    assignment_statement SEMI_COLON { [$1] }
  | assignment_statement SEMI_COLON assignment_list { $1 :: $3 }

assignment_statement :
  ID ASSIGN arith_expr { STAssn (Variable $1, $3) }

non_loop_statements :
    statement { [$1] }
  | statement SEMI_COLON non_loop_statements { $1 :: $3 }

statement :
    ST_SKIP { STSkip }
  | ST_BREAK { STBreak }
  | assignment_statement { $1 }
  | if_statement { $1 }
  | if_prob_statement { $1 }
  | in_loop_score_statement { $1 }

in_loop_score_statement :
  ST_SCORE LPAREN arith_expr RPAREN { STInLoopScore $3 }

if_statement :
  ST_IF bool_expr ST_THEN non_loop_statements
  optional_elseif_seq
  ST_FI { STIfBool (($2, $4) :: $5) }

optional_elseif_seq :
      { [] }
  | ST_ELSEIF bool_expr ST_THEN non_loop_statements optional_elseif_seq { ($2, $4) :: $5 }

if_prob_statement :
  ST_IF ST_PROB LPAREN arith_expr RPAREN ST_THEN non_loop_statements
  ST_ELSE non_loop_statements
  ST_FI { STIfProb ($4, $7, $9) }

arith_expr :
    mul_level_expr PLUS arith_expr { AOperation (OpAdd, [ $1; $3 ]) }
  | mul_level_expr MINUS arith_expr { AOperation (OpMinus, [ $1; $3 ]) }
  | mul_level_expr { $1 }

mul_level_expr :
    id_level_expr MULTIPLY mul_level_expr { AOperation (OpMul, [ $1; $3 ]) }
  | id_level_expr { $1 }

id_level_expr :
    ID { AVar (Variable $1) }
  | number { AConst $1 }
  | LPAREN arith_expr RPAREN { $2 }

number :
    DOUBLE            { $1 }
  | INT               { ProgramAnalyser.Global.Numeric $1 }
  | MINUS DOUBLE      { -$2 }
  | MINUS INT         { ProgramAnalyser.Global.Numeric (-$2) }

bool_expr :
    and_bool_expr { $1 }
and_bool_expr :
    and_bool_expr AND bool_expr_element { BAnd ($1, $3) }
  | bool_expr_element { $1 }
bool_expr_element :
    arith_expr cmp_op arith_expr { BCompare ($2, $1, $3) }
  | bool_expr_constant { $1 }
bool_expr_constant :
    TRUE { BTrue }
  | FALSE { BFalse }
  | LPAREN bool_expr RPAREN { $2 }
cmp_op :
    LE { CmpLe }
  | GE { CmpGe }
  | LANGLE { CmpLt }
  | RANGLE { CmpGt }

randvars :
  rv_decl_list { RandomVarList $1 }

rv_decl_list :
      { [] }
  | ID TILDE ST_SAMPLE distribution rv_decl_list { (Variable $1, $4) :: $5 }

dist_arg :
    number { DANumber $1 }
  | number HAT INT { DAExp ($1, $3) }

dist_arg_list :
    dist_arg { [$1] }
  | dist_arg COMMA dist_arg_list { $1 :: $3 }

num_list :
    number { [$1] }
  | number COMMA num_list { $1 :: $3 }
