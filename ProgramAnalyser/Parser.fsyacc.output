------------------------
states = 
state 0:  items:    _startrandvars ->  . randvars
  actions:    action 'ERROR' (noprec):   reduce rv_decl_list --> 
    action 'KW_CONFIG' (noprec):   reduce rv_decl_list --> 
    action 'TRUE' (noprec):   reduce rv_decl_list --> 
    action 'FALSE' (noprec):   reduce rv_decl_list --> 
    action 'AND' (noprec):   reduce rv_decl_list --> 
    action 'OR' (noprec):   reduce rv_decl_list --> 
    action 'GE' (noprec):   reduce rv_decl_list --> 
    action 'LE' (noprec):   reduce rv_decl_list --> 
    action 'EQ' (noprec):   reduce rv_decl_list --> 
    action 'NEQ' (noprec):   reduce rv_decl_list --> 
    action 'LANGLE' (noprec):   reduce rv_decl_list --> 
    action 'RANGLE' (noprec):   reduce rv_decl_list --> 
    action 'ST_SAMPLE' (noprec):   reduce rv_decl_list --> 
    action 'ST_BREAK' (noprec):   reduce rv_decl_list --> 
    action 'ST_IF' (noprec):   reduce rv_decl_list --> 
    action 'ST_THEN' (noprec):   reduce rv_decl_list --> 
    action 'ST_ELSE' (noprec):   reduce rv_decl_list --> 
    action 'ST_ELSEIF' (noprec):   reduce rv_decl_list --> 
    action 'ST_FI' (noprec):   reduce rv_decl_list --> 
    action 'ST_PROB' (noprec):   reduce rv_decl_list --> 
    action 'ST_SKIP' (noprec):   reduce rv_decl_list --> 
    action 'ST_SCORE' (noprec):   reduce rv_decl_list --> 
    action 'ST_RETURN' (noprec):   reduce rv_decl_list --> 
    action 'ST_WHILE' (noprec):   reduce rv_decl_list --> 
    action 'ST_DO' (noprec):   reduce rv_decl_list --> 
    action 'ST_OD' (noprec):   reduce rv_decl_list --> 
    action 'PLUS' (noprec):   reduce rv_decl_list --> 
    action 'MULTIPLY' (noprec):   reduce rv_decl_list --> 
    action 'MINUS' (noprec):   reduce rv_decl_list --> 
    action 'COMMA' (noprec):   reduce rv_decl_list --> 
    action 'ASSIGN' (noprec):   reduce rv_decl_list --> 
    action 'TILDE' (noprec):   reduce rv_decl_list --> 
    action 'HAT' (noprec):   reduce rv_decl_list --> 
    action 'LPAREN' (noprec):   reduce rv_decl_list --> 
    action 'RPAREN' (noprec):   reduce rv_decl_list --> 
    action 'LBKT' (noprec):   reduce rv_decl_list --> 
    action 'RBKT' (noprec):   reduce rv_decl_list --> 
    action 'VBAR' (noprec):   reduce rv_decl_list --> 
    action 'NEWLINE' (noprec):   reduce rv_decl_list --> 
    action 'END_BLOCK_COMMENTING' (noprec):   reduce rv_decl_list --> 
    action 'EOF' (noprec):   reduce rv_decl_list --> 
    action 'SEMI_COLON' (noprec):   reduce rv_decl_list --> 
    action 'END' (noprec):   reduce rv_decl_list --> 
    action 'DOUBLE' (noprec):   reduce rv_decl_list --> 
    action 'INT' (noprec):   reduce rv_decl_list --> 
    action 'ID' (noprec):   shift 125
    action 'error' (noprec):   reduce rv_decl_list --> 
    action '#' (noprec):   reduce rv_decl_list --> 
    action '$$' (noprec):   reduce rv_decl_list --> 
  immediate action: <none>  gotos:    goto randvars: 1
    goto rv_decl_list: 124
state 1:  items:    _startrandvars -> randvars . 
  actions:    action 'ERROR' (noprec):   accept
    action 'KW_CONFIG' (noprec):   accept
    action 'TRUE' (noprec):   accept
    action 'FALSE' (noprec):   accept
    action 'AND' (noprec):   accept
    action 'OR' (noprec):   accept
    action 'GE' (noprec):   accept
    action 'LE' (noprec):   accept
    action 'EQ' (noprec):   accept
    action 'NEQ' (noprec):   accept
    action 'LANGLE' (noprec):   accept
    action 'RANGLE' (noprec):   accept
    action 'ST_SAMPLE' (noprec):   accept
    action 'ST_BREAK' (noprec):   accept
    action 'ST_IF' (noprec):   accept
    action 'ST_THEN' (noprec):   accept
    action 'ST_ELSE' (noprec):   accept
    action 'ST_ELSEIF' (noprec):   accept
    action 'ST_FI' (noprec):   accept
    action 'ST_PROB' (noprec):   accept
    action 'ST_SKIP' (noprec):   accept
    action 'ST_SCORE' (noprec):   accept
    action 'ST_RETURN' (noprec):   accept
    action 'ST_WHILE' (noprec):   accept
    action 'ST_DO' (noprec):   accept
    action 'ST_OD' (noprec):   accept
    action 'PLUS' (noprec):   accept
    action 'MULTIPLY' (noprec):   accept
    action 'MINUS' (noprec):   accept
    action 'COMMA' (noprec):   accept
    action 'ASSIGN' (noprec):   accept
    action 'TILDE' (noprec):   accept
    action 'HAT' (noprec):   accept
    action 'LPAREN' (noprec):   accept
    action 'RPAREN' (noprec):   accept
    action 'LBKT' (noprec):   accept
    action 'RBKT' (noprec):   accept
    action 'VBAR' (noprec):   accept
    action 'NEWLINE' (noprec):   accept
    action 'END_BLOCK_COMMENTING' (noprec):   accept
    action 'EOF' (noprec):   accept
    action 'SEMI_COLON' (noprec):   accept
    action 'END' (noprec):   accept
    action 'DOUBLE' (noprec):   accept
    action 'INT' (noprec):   accept
    action 'ID' (noprec):   accept
    action 'error' (noprec):   accept
    action '#' (noprec):   accept
    action '$$' (noprec):   accept
  immediate action:   accept  gotos:state 2:  items:    _startprogram ->  . program
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 52
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto program: 3
    goto assignment_list: 4
    goto assignment_statement: 49
state 3:  items:    _startprogram -> program . 
  actions:    action 'ERROR' (noprec):   accept
    action 'KW_CONFIG' (noprec):   accept
    action 'TRUE' (noprec):   accept
    action 'FALSE' (noprec):   accept
    action 'AND' (noprec):   accept
    action 'OR' (noprec):   accept
    action 'GE' (noprec):   accept
    action 'LE' (noprec):   accept
    action 'EQ' (noprec):   accept
    action 'NEQ' (noprec):   accept
    action 'LANGLE' (noprec):   accept
    action 'RANGLE' (noprec):   accept
    action 'ST_SAMPLE' (noprec):   accept
    action 'ST_BREAK' (noprec):   accept
    action 'ST_IF' (noprec):   accept
    action 'ST_THEN' (noprec):   accept
    action 'ST_ELSE' (noprec):   accept
    action 'ST_ELSEIF' (noprec):   accept
    action 'ST_FI' (noprec):   accept
    action 'ST_PROB' (noprec):   accept
    action 'ST_SKIP' (noprec):   accept
    action 'ST_SCORE' (noprec):   accept
    action 'ST_RETURN' (noprec):   accept
    action 'ST_WHILE' (noprec):   accept
    action 'ST_DO' (noprec):   accept
    action 'ST_OD' (noprec):   accept
    action 'PLUS' (noprec):   accept
    action 'MULTIPLY' (noprec):   accept
    action 'MINUS' (noprec):   accept
    action 'COMMA' (noprec):   accept
    action 'ASSIGN' (noprec):   accept
    action 'TILDE' (noprec):   accept
    action 'HAT' (noprec):   accept
    action 'LPAREN' (noprec):   accept
    action 'RPAREN' (noprec):   accept
    action 'LBKT' (noprec):   accept
    action 'RBKT' (noprec):   accept
    action 'VBAR' (noprec):   accept
    action 'NEWLINE' (noprec):   accept
    action 'END_BLOCK_COMMENTING' (noprec):   accept
    action 'EOF' (noprec):   accept
    action 'SEMI_COLON' (noprec):   accept
    action 'END' (noprec):   accept
    action 'DOUBLE' (noprec):   accept
    action 'INT' (noprec):   accept
    action 'ID' (noprec):   accept
    action 'error' (noprec):   accept
    action '#' (noprec):   accept
    action '$$' (noprec):   accept
  immediate action:   accept  gotos:state 4:  items:    program -> assignment_list . 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   shift 5
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 5:  items:    program -> assignment_list 'LBKT' . bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   shift 116
    action 'FALSE' (noprec):   shift 117
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 99
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 112
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
    goto bool_expr: 6
    goto and_bool_expr: 108
    goto bool_expr_element: 111
    goto bool_expr_constant: 115
state 6:  items:    program -> assignment_list 'LBKT' bool_expr . 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   shift 7
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 7:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' . 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   shift 8
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 8:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' . bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   shift 116
    action 'FALSE' (noprec):   shift 117
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 99
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 112
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
    goto bool_expr: 9
    goto and_bool_expr: 108
    goto bool_expr_element: 111
    goto bool_expr_constant: 115
state 9:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr . 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   shift 10
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 10:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' . non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   shift 59
    action 'ST_IF' (noprec):   shift 68
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   shift 58
    action 'ST_SCORE' (noprec):   shift 64
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 52
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto assignment_statement: 60
    goto non_loop_statements: 11
    goto statement: 55
    goto in_loop_score_statement: 63
    goto if_statement: 61
    goto if_prob_statement: 62
state 11:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements . 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   shift 12
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 12:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' . 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   shift 13
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 13:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' . optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   reduce optional_end_score_statement --> 
    action 'KW_CONFIG' (noprec):   reduce optional_end_score_statement --> 
    action 'TRUE' (noprec):   reduce optional_end_score_statement --> 
    action 'FALSE' (noprec):   reduce optional_end_score_statement --> 
    action 'AND' (noprec):   reduce optional_end_score_statement --> 
    action 'OR' (noprec):   reduce optional_end_score_statement --> 
    action 'GE' (noprec):   reduce optional_end_score_statement --> 
    action 'LE' (noprec):   reduce optional_end_score_statement --> 
    action 'EQ' (noprec):   reduce optional_end_score_statement --> 
    action 'NEQ' (noprec):   reduce optional_end_score_statement --> 
    action 'LANGLE' (noprec):   reduce optional_end_score_statement --> 
    action 'RANGLE' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_SAMPLE' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_BREAK' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_IF' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_THEN' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_ELSE' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_ELSEIF' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_FI' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_PROB' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_SKIP' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_SCORE' (noprec):   shift 33
    action 'ST_RETURN' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_WHILE' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_DO' (noprec):   reduce optional_end_score_statement --> 
    action 'ST_OD' (noprec):   reduce optional_end_score_statement --> 
    action 'PLUS' (noprec):   reduce optional_end_score_statement --> 
    action 'MULTIPLY' (noprec):   reduce optional_end_score_statement --> 
    action 'MINUS' (noprec):   reduce optional_end_score_statement --> 
    action 'COMMA' (noprec):   reduce optional_end_score_statement --> 
    action 'ASSIGN' (noprec):   reduce optional_end_score_statement --> 
    action 'TILDE' (noprec):   reduce optional_end_score_statement --> 
    action 'HAT' (noprec):   reduce optional_end_score_statement --> 
    action 'LPAREN' (noprec):   reduce optional_end_score_statement --> 
    action 'RPAREN' (noprec):   reduce optional_end_score_statement --> 
    action 'LBKT' (noprec):   reduce optional_end_score_statement --> 
    action 'RBKT' (noprec):   reduce optional_end_score_statement --> 
    action 'VBAR' (noprec):   reduce optional_end_score_statement --> 
    action 'NEWLINE' (noprec):   reduce optional_end_score_statement --> 
    action 'END_BLOCK_COMMENTING' (noprec):   reduce optional_end_score_statement --> 
    action 'EOF' (noprec):   reduce optional_end_score_statement --> 
    action 'SEMI_COLON' (noprec):   reduce optional_end_score_statement --> 
    action 'END' (noprec):   reduce optional_end_score_statement --> 
    action 'DOUBLE' (noprec):   reduce optional_end_score_statement --> 
    action 'INT' (noprec):   reduce optional_end_score_statement --> 
    action 'ID' (noprec):   reduce optional_end_score_statement --> 
    action 'error' (noprec):   reduce optional_end_score_statement --> 
    action '#' (noprec):   reduce optional_end_score_statement --> 
    action '$$' (noprec):   reduce optional_end_score_statement --> 
  immediate action: <none>  gotos:    goto optional_end_score_statement: 14
state 14:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement . optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   reduce optional_if_score_statement --> 
    action 'KW_CONFIG' (noprec):   reduce optional_if_score_statement --> 
    action 'TRUE' (noprec):   reduce optional_if_score_statement --> 
    action 'FALSE' (noprec):   reduce optional_if_score_statement --> 
    action 'AND' (noprec):   reduce optional_if_score_statement --> 
    action 'OR' (noprec):   reduce optional_if_score_statement --> 
    action 'GE' (noprec):   reduce optional_if_score_statement --> 
    action 'LE' (noprec):   reduce optional_if_score_statement --> 
    action 'EQ' (noprec):   reduce optional_if_score_statement --> 
    action 'NEQ' (noprec):   reduce optional_if_score_statement --> 
    action 'LANGLE' (noprec):   reduce optional_if_score_statement --> 
    action 'RANGLE' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_SAMPLE' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_BREAK' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_IF' (noprec):   shift 19
    action 'ST_THEN' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_ELSE' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_ELSEIF' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_FI' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_PROB' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_SKIP' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_SCORE' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_RETURN' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_WHILE' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_DO' (noprec):   reduce optional_if_score_statement --> 
    action 'ST_OD' (noprec):   reduce optional_if_score_statement --> 
    action 'PLUS' (noprec):   reduce optional_if_score_statement --> 
    action 'MULTIPLY' (noprec):   reduce optional_if_score_statement --> 
    action 'MINUS' (noprec):   reduce optional_if_score_statement --> 
    action 'COMMA' (noprec):   reduce optional_if_score_statement --> 
    action 'ASSIGN' (noprec):   reduce optional_if_score_statement --> 
    action 'TILDE' (noprec):   reduce optional_if_score_statement --> 
    action 'HAT' (noprec):   reduce optional_if_score_statement --> 
    action 'LPAREN' (noprec):   reduce optional_if_score_statement --> 
    action 'RPAREN' (noprec):   reduce optional_if_score_statement --> 
    action 'LBKT' (noprec):   reduce optional_if_score_statement --> 
    action 'RBKT' (noprec):   reduce optional_if_score_statement --> 
    action 'VBAR' (noprec):   reduce optional_if_score_statement --> 
    action 'NEWLINE' (noprec):   reduce optional_if_score_statement --> 
    action 'END_BLOCK_COMMENTING' (noprec):   reduce optional_if_score_statement --> 
    action 'EOF' (noprec):   reduce optional_if_score_statement --> 
    action 'SEMI_COLON' (noprec):   reduce optional_if_score_statement --> 
    action 'END' (noprec):   reduce optional_if_score_statement --> 
    action 'DOUBLE' (noprec):   reduce optional_if_score_statement --> 
    action 'INT' (noprec):   reduce optional_if_score_statement --> 
    action 'ID' (noprec):   reduce optional_if_score_statement --> 
    action 'error' (noprec):   reduce optional_if_score_statement --> 
    action '#' (noprec):   reduce optional_if_score_statement --> 
    action '$$' (noprec):   reduce optional_if_score_statement --> 
  immediate action: <none>  gotos:    goto optional_if_score_statement: 15
state 15:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement . 'ST_RETURN' 'ID' 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   shift 16
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 16:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' . 'ID' 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 17
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 17:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' . 'END'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   shift 18
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 18:  items:    program -> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END' . 
  actions:    action 'ERROR' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'KW_CONFIG' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'TRUE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'FALSE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'AND' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'OR' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'GE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'LE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'EQ' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'NEQ' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'LANGLE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'RANGLE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_SAMPLE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_BREAK' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_IF' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_THEN' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_ELSE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_ELSEIF' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_FI' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_PROB' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_SKIP' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_SCORE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_RETURN' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_WHILE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_DO' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ST_OD' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'PLUS' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'MULTIPLY' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'MINUS' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'COMMA' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ASSIGN' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'TILDE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'HAT' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'LPAREN' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'RPAREN' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'LBKT' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'RBKT' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'VBAR' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'NEWLINE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'EOF' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'SEMI_COLON' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'END' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'DOUBLE' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'INT' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'ID' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action 'error' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action '#' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
    action '$$' (noprec):   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'
  immediate action:   reduce program --> assignment_list 'LBKT' bool_expr 'RBKT' 'ST_WHILE' bool_expr 'ST_DO' non_loop_statements 'ST_OD' 'SEMI_COLON' optional_end_score_statement optional_if_score_statement 'ST_RETURN' 'ID' 'END'  gotos:state 19:  items:    optional_if_score_statement -> 'ST_IF' . bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   shift 116
    action 'FALSE' (noprec):   shift 117
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 99
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 112
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
    goto bool_expr: 20
    goto and_bool_expr: 108
    goto bool_expr_element: 111
    goto bool_expr_constant: 115
state 20:  items:    optional_if_score_statement -> 'ST_IF' bool_expr . 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   shift 21
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 21:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' . 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   shift 22
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 22:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' . 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 23
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 23:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' . 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   shift 24
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 24:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' . 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   shift 25
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 25:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' . 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   shift 26
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 26:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' . 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   shift 27
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 27:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' . 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 28
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 28:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' . 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   shift 29
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 29:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' . 'RPAREN' 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   shift 30
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 30:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' . 'ST_FI' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   shift 31
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 31:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' . 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   shift 32
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 32:  items:    optional_if_score_statement -> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON' . 
  actions:    action 'ERROR' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'KW_CONFIG' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'TRUE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'FALSE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'AND' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'OR' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'GE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'LE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'EQ' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'NEQ' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'LANGLE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'RANGLE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_SAMPLE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_BREAK' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_IF' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_THEN' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_ELSE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_ELSEIF' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_FI' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_PROB' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_SKIP' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_SCORE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_RETURN' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_WHILE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_DO' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ST_OD' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'PLUS' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'MULTIPLY' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'MINUS' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'COMMA' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ASSIGN' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'TILDE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'HAT' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'LPAREN' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'RPAREN' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'LBKT' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'RBKT' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'VBAR' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'NEWLINE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'EOF' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'SEMI_COLON' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'END' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'DOUBLE' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'INT' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'ID' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action 'error' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action '#' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
    action '$$' (noprec):   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'
  immediate action:   reduce optional_if_score_statement --> 'ST_IF' bool_expr 'ST_THEN' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_ELSE' 'ST_SCORE' 'LPAREN' 'INT' 'RPAREN' 'ST_FI' 'SEMI_COLON'  gotos:state 33:  items:    optional_end_score_statement -> 'ST_SCORE' . 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    optional_end_score_statement -> 'ST_SCORE' . 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 34
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 34:  items:    optional_end_score_statement -> 'ST_SCORE' 'LPAREN' . distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    optional_end_score_statement -> 'ST_SCORE' 'LPAREN' . arith_expr 'RPAREN' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 98
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 44
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto distribution: 35
    goto arith_expr: 40
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
state 35:  items:    optional_end_score_statement -> 'ST_SCORE' 'LPAREN' distribution . 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   shift 36
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 36:  items:    optional_end_score_statement -> 'ST_SCORE' 'LPAREN' distribution 'COMMA' . arith_expr 'RPAREN' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 98
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 37
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
state 37:  items:    optional_end_score_statement -> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr . 'RPAREN' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   shift 38
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 38:  items:    optional_end_score_statement -> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' . 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   shift 39
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 39:  items:    optional_end_score_statement -> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON' . 
  actions:    action 'ERROR' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'KW_CONFIG' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'TRUE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'FALSE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'AND' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'OR' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'GE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'LE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'EQ' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'NEQ' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'LANGLE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'RANGLE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_SAMPLE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_BREAK' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_IF' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_THEN' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_ELSE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_ELSEIF' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_FI' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_PROB' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_SKIP' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_SCORE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_RETURN' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_WHILE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_DO' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_OD' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'PLUS' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'MULTIPLY' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'MINUS' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'COMMA' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ASSIGN' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'TILDE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'HAT' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'LPAREN' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'RPAREN' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'LBKT' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'RBKT' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'VBAR' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'NEWLINE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'EOF' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'SEMI_COLON' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'END' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'DOUBLE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'INT' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ID' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'error' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action '#' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
    action '$$' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'
  immediate action:   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' distribution 'COMMA' arith_expr 'RPAREN' 'SEMI_COLON'  gotos:state 40:  items:    optional_end_score_statement -> 'ST_SCORE' 'LPAREN' arith_expr . 'RPAREN' 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   shift 41
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 41:  items:    optional_end_score_statement -> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' . 'SEMI_COLON'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   shift 42
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 42:  items:    optional_end_score_statement -> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON' . 
  actions:    action 'ERROR' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'KW_CONFIG' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'TRUE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'FALSE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'AND' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'OR' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'GE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'LE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'EQ' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'NEQ' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'LANGLE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'RANGLE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_SAMPLE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_BREAK' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_IF' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_THEN' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_ELSE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_ELSEIF' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_FI' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_PROB' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_SKIP' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_SCORE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_RETURN' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_WHILE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_DO' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ST_OD' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'PLUS' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'MULTIPLY' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'MINUS' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'COMMA' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ASSIGN' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'TILDE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'HAT' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'LPAREN' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'RPAREN' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'LBKT' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'RBKT' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'VBAR' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'NEWLINE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'EOF' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'SEMI_COLON' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'END' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'DOUBLE' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'INT' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'ID' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action 'error' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action '#' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
    action '$$' (noprec):   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'
  immediate action:   reduce optional_end_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' 'SEMI_COLON'  gotos:state 43:  items:    distribution -> 'ID' . 'LPAREN' dist_arg_list 'RPAREN'
    distribution -> 'ID' . 'LPAREN' 'RPAREN'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 45
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 44:  items:    distribution -> 'ID' . 'LPAREN' dist_arg_list 'RPAREN'
    distribution -> 'ID' . 'LPAREN' 'RPAREN'
    id_level_expr -> 'ID' . 
  actions:    action 'ERROR' (noprec):   reduce id_level_expr --> 'ID'
    action 'KW_CONFIG' (noprec):   reduce id_level_expr --> 'ID'
    action 'TRUE' (noprec):   reduce id_level_expr --> 'ID'
    action 'FALSE' (noprec):   reduce id_level_expr --> 'ID'
    action 'AND' (noprec):   reduce id_level_expr --> 'ID'
    action 'OR' (noprec):   reduce id_level_expr --> 'ID'
    action 'GE' (noprec):   reduce id_level_expr --> 'ID'
    action 'LE' (noprec):   reduce id_level_expr --> 'ID'
    action 'EQ' (noprec):   reduce id_level_expr --> 'ID'
    action 'NEQ' (noprec):   reduce id_level_expr --> 'ID'
    action 'LANGLE' (noprec):   reduce id_level_expr --> 'ID'
    action 'RANGLE' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_SAMPLE' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_BREAK' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_IF' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_THEN' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_ELSE' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_ELSEIF' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_FI' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_PROB' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_SKIP' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_SCORE' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_RETURN' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_WHILE' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_DO' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_OD' (noprec):   reduce id_level_expr --> 'ID'
    action 'PLUS' (noprec):   reduce id_level_expr --> 'ID'
    action 'MULTIPLY' (noprec):   reduce id_level_expr --> 'ID'
    action 'MINUS' (noprec):   reduce id_level_expr --> 'ID'
    action 'COMMA' (noprec):   reduce id_level_expr --> 'ID'
    action 'ASSIGN' (noprec):   reduce id_level_expr --> 'ID'
    action 'TILDE' (noprec):   reduce id_level_expr --> 'ID'
    action 'HAT' (noprec):   reduce id_level_expr --> 'ID'
    action 'LPAREN' (noprec):   shift 45
    action 'RPAREN' (noprec):   reduce id_level_expr --> 'ID'
    action 'LBKT' (noprec):   reduce id_level_expr --> 'ID'
    action 'RBKT' (noprec):   reduce id_level_expr --> 'ID'
    action 'VBAR' (noprec):   reduce id_level_expr --> 'ID'
    action 'NEWLINE' (noprec):   reduce id_level_expr --> 'ID'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce id_level_expr --> 'ID'
    action 'EOF' (noprec):   reduce id_level_expr --> 'ID'
    action 'SEMI_COLON' (noprec):   reduce id_level_expr --> 'ID'
    action 'END' (noprec):   reduce id_level_expr --> 'ID'
    action 'DOUBLE' (noprec):   reduce id_level_expr --> 'ID'
    action 'INT' (noprec):   reduce id_level_expr --> 'ID'
    action 'ID' (noprec):   reduce id_level_expr --> 'ID'
    action 'error' (noprec):   reduce id_level_expr --> 'ID'
    action '#' (noprec):   reduce id_level_expr --> 'ID'
    action '$$' (noprec):   reduce id_level_expr --> 'ID'
  immediate action: <none>  gotos:state 45:  items:    distribution -> 'ID' 'LPAREN' . dist_arg_list 'RPAREN'
    distribution -> 'ID' 'LPAREN' . 'RPAREN'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   shift 48
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto number: 130
    goto dist_arg: 133
    goto dist_arg_list: 46
state 46:  items:    distribution -> 'ID' 'LPAREN' dist_arg_list . 'RPAREN'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   shift 47
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 47:  items:    distribution -> 'ID' 'LPAREN' dist_arg_list 'RPAREN' . 
  actions:    action 'ERROR' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'KW_CONFIG' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'TRUE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'FALSE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'AND' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'OR' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'GE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'LE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'EQ' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'NEQ' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'LANGLE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'RANGLE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_SAMPLE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_BREAK' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_IF' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_THEN' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_ELSE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_ELSEIF' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_FI' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_PROB' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_SKIP' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_SCORE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_RETURN' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_WHILE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_DO' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ST_OD' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'PLUS' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'MULTIPLY' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'MINUS' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'COMMA' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ASSIGN' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'TILDE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'HAT' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'LPAREN' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'RPAREN' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'LBKT' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'RBKT' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'VBAR' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'NEWLINE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'EOF' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'SEMI_COLON' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'END' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'DOUBLE' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'INT' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'ID' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action 'error' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action '#' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
    action '$$' (noprec):   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'
  immediate action:   reduce distribution --> 'ID' 'LPAREN' dist_arg_list 'RPAREN'  gotos:state 48:  items:    distribution -> 'ID' 'LPAREN' 'RPAREN' . 
  actions:    action 'ERROR' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'KW_CONFIG' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'TRUE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'FALSE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'AND' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'OR' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'GE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'LE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'EQ' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'NEQ' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'LANGLE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'RANGLE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_SAMPLE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_BREAK' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_IF' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_THEN' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_ELSE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_ELSEIF' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_FI' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_PROB' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_SKIP' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_SCORE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_RETURN' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_WHILE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_DO' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ST_OD' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'PLUS' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'MULTIPLY' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'MINUS' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'COMMA' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ASSIGN' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'TILDE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'HAT' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'LPAREN' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'RPAREN' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'LBKT' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'RBKT' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'VBAR' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'NEWLINE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'EOF' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'SEMI_COLON' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'END' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'DOUBLE' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'INT' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'ID' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action 'error' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action '#' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
    action '$$' (noprec):   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'
  immediate action:   reduce distribution --> 'ID' 'LPAREN' 'RPAREN'  gotos:state 49:  items:    assignment_list -> assignment_statement . 'SEMI_COLON'
    assignment_list -> assignment_statement . 'SEMI_COLON' assignment_list
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   shift 50
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 50:  items:    assignment_list -> assignment_statement 'SEMI_COLON' . 
    assignment_list -> assignment_statement 'SEMI_COLON' . assignment_list
  actions:    action 'ERROR' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'KW_CONFIG' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'TRUE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'FALSE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'AND' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'OR' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'GE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'LE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'EQ' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'NEQ' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'LANGLE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'RANGLE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_SAMPLE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_BREAK' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_IF' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_THEN' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_ELSE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_ELSEIF' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_FI' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_PROB' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_SKIP' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_SCORE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_RETURN' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_WHILE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_DO' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ST_OD' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'PLUS' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'MULTIPLY' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'MINUS' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'COMMA' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ASSIGN' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'TILDE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'HAT' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'LPAREN' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'RPAREN' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'LBKT' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'RBKT' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'VBAR' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'NEWLINE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'EOF' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'SEMI_COLON' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'END' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'DOUBLE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'INT' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action 'ID' (noprec):   shift 52
    action 'error' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action '#' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
    action '$$' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON'
  immediate action: <none>  gotos:    goto assignment_list: 51
    goto assignment_statement: 49
state 51:  items:    assignment_list -> assignment_statement 'SEMI_COLON' assignment_list . 
  actions:    action 'ERROR' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'KW_CONFIG' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'TRUE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'FALSE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'AND' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'OR' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'GE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'LE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'EQ' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'NEQ' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'LANGLE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'RANGLE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_SAMPLE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_BREAK' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_IF' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_THEN' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_ELSE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_ELSEIF' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_FI' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_PROB' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_SKIP' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_SCORE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_RETURN' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_WHILE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_DO' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ST_OD' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'PLUS' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'MULTIPLY' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'MINUS' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'COMMA' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ASSIGN' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'TILDE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'HAT' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'LPAREN' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'RPAREN' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'LBKT' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'RBKT' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'VBAR' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'NEWLINE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'END_BLOCK_COMMENTING' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'EOF' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'SEMI_COLON' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'END' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'DOUBLE' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'INT' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'ID' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action 'error' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action '#' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
    action '$$' (noprec):   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list
  immediate action:   reduce assignment_list --> assignment_statement 'SEMI_COLON' assignment_list  gotos:state 52:  items:    assignment_statement -> 'ID' . 'ASSIGN' arith_expr
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   shift 53
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 53:  items:    assignment_statement -> 'ID' 'ASSIGN' . arith_expr
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 98
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 54
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
state 54:  items:    assignment_statement -> 'ID' 'ASSIGN' arith_expr . 
  actions:    action 'ERROR' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'KW_CONFIG' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'TRUE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'FALSE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'AND' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'OR' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'GE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'LE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'EQ' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'NEQ' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'LANGLE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'RANGLE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_SAMPLE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_BREAK' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_IF' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_THEN' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_ELSE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_ELSEIF' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_FI' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_PROB' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_SKIP' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_SCORE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_RETURN' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_WHILE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_DO' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ST_OD' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'PLUS' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'MULTIPLY' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'MINUS' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'COMMA' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ASSIGN' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'TILDE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'HAT' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'LPAREN' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'RPAREN' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'LBKT' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'RBKT' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'VBAR' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'NEWLINE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'END_BLOCK_COMMENTING' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'EOF' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'SEMI_COLON' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'END' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'DOUBLE' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'INT' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'ID' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action 'error' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action '#' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
    action '$$' (noprec):   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr
  immediate action:   reduce assignment_statement --> 'ID' 'ASSIGN' arith_expr  gotos:state 55:  items:    non_loop_statements -> statement . 
    non_loop_statements -> statement . 'SEMI_COLON' non_loop_statements
  actions:    action 'ERROR' (noprec):   reduce non_loop_statements --> statement
    action 'KW_CONFIG' (noprec):   reduce non_loop_statements --> statement
    action 'TRUE' (noprec):   reduce non_loop_statements --> statement
    action 'FALSE' (noprec):   reduce non_loop_statements --> statement
    action 'AND' (noprec):   reduce non_loop_statements --> statement
    action 'OR' (noprec):   reduce non_loop_statements --> statement
    action 'GE' (noprec):   reduce non_loop_statements --> statement
    action 'LE' (noprec):   reduce non_loop_statements --> statement
    action 'EQ' (noprec):   reduce non_loop_statements --> statement
    action 'NEQ' (noprec):   reduce non_loop_statements --> statement
    action 'LANGLE' (noprec):   reduce non_loop_statements --> statement
    action 'RANGLE' (noprec):   reduce non_loop_statements --> statement
    action 'ST_SAMPLE' (noprec):   reduce non_loop_statements --> statement
    action 'ST_BREAK' (noprec):   reduce non_loop_statements --> statement
    action 'ST_IF' (noprec):   reduce non_loop_statements --> statement
    action 'ST_THEN' (noprec):   reduce non_loop_statements --> statement
    action 'ST_ELSE' (noprec):   reduce non_loop_statements --> statement
    action 'ST_ELSEIF' (noprec):   reduce non_loop_statements --> statement
    action 'ST_FI' (noprec):   reduce non_loop_statements --> statement
    action 'ST_PROB' (noprec):   reduce non_loop_statements --> statement
    action 'ST_SKIP' (noprec):   reduce non_loop_statements --> statement
    action 'ST_SCORE' (noprec):   reduce non_loop_statements --> statement
    action 'ST_RETURN' (noprec):   reduce non_loop_statements --> statement
    action 'ST_WHILE' (noprec):   reduce non_loop_statements --> statement
    action 'ST_DO' (noprec):   reduce non_loop_statements --> statement
    action 'ST_OD' (noprec):   reduce non_loop_statements --> statement
    action 'PLUS' (noprec):   reduce non_loop_statements --> statement
    action 'MULTIPLY' (noprec):   reduce non_loop_statements --> statement
    action 'MINUS' (noprec):   reduce non_loop_statements --> statement
    action 'COMMA' (noprec):   reduce non_loop_statements --> statement
    action 'ASSIGN' (noprec):   reduce non_loop_statements --> statement
    action 'TILDE' (noprec):   reduce non_loop_statements --> statement
    action 'HAT' (noprec):   reduce non_loop_statements --> statement
    action 'LPAREN' (noprec):   reduce non_loop_statements --> statement
    action 'RPAREN' (noprec):   reduce non_loop_statements --> statement
    action 'LBKT' (noprec):   reduce non_loop_statements --> statement
    action 'RBKT' (noprec):   reduce non_loop_statements --> statement
    action 'VBAR' (noprec):   reduce non_loop_statements --> statement
    action 'NEWLINE' (noprec):   reduce non_loop_statements --> statement
    action 'END_BLOCK_COMMENTING' (noprec):   reduce non_loop_statements --> statement
    action 'EOF' (noprec):   reduce non_loop_statements --> statement
    action 'SEMI_COLON' (noprec):   shift 56
    action 'END' (noprec):   reduce non_loop_statements --> statement
    action 'DOUBLE' (noprec):   reduce non_loop_statements --> statement
    action 'INT' (noprec):   reduce non_loop_statements --> statement
    action 'ID' (noprec):   reduce non_loop_statements --> statement
    action 'error' (noprec):   reduce non_loop_statements --> statement
    action '#' (noprec):   reduce non_loop_statements --> statement
    action '$$' (noprec):   reduce non_loop_statements --> statement
  immediate action: <none>  gotos:state 56:  items:    non_loop_statements -> statement 'SEMI_COLON' . non_loop_statements
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   shift 59
    action 'ST_IF' (noprec):   shift 68
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   shift 58
    action 'ST_SCORE' (noprec):   shift 64
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 52
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto assignment_statement: 60
    goto non_loop_statements: 57
    goto statement: 55
    goto in_loop_score_statement: 63
    goto if_statement: 61
    goto if_prob_statement: 62
state 57:  items:    non_loop_statements -> statement 'SEMI_COLON' non_loop_statements . 
  actions:    action 'ERROR' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'KW_CONFIG' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'TRUE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'FALSE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'AND' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'OR' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'GE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'LE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'EQ' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'NEQ' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'LANGLE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'RANGLE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_SAMPLE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_BREAK' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_IF' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_THEN' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_ELSE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_ELSEIF' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_FI' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_PROB' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_SKIP' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_SCORE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_RETURN' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_WHILE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_DO' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ST_OD' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'PLUS' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'MULTIPLY' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'MINUS' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'COMMA' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ASSIGN' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'TILDE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'HAT' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'LPAREN' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'RPAREN' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'LBKT' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'RBKT' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'VBAR' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'NEWLINE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'END_BLOCK_COMMENTING' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'EOF' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'SEMI_COLON' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'END' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'DOUBLE' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'INT' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'ID' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action 'error' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action '#' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
    action '$$' (noprec):   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements
  immediate action:   reduce non_loop_statements --> statement 'SEMI_COLON' non_loop_statements  gotos:state 58:  items:    statement -> 'ST_SKIP' . 
  actions:    action 'ERROR' (noprec):   reduce statement --> 'ST_SKIP'
    action 'KW_CONFIG' (noprec):   reduce statement --> 'ST_SKIP'
    action 'TRUE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'FALSE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'AND' (noprec):   reduce statement --> 'ST_SKIP'
    action 'OR' (noprec):   reduce statement --> 'ST_SKIP'
    action 'GE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'LE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'EQ' (noprec):   reduce statement --> 'ST_SKIP'
    action 'NEQ' (noprec):   reduce statement --> 'ST_SKIP'
    action 'LANGLE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'RANGLE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_SAMPLE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_BREAK' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_IF' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_THEN' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_ELSE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_ELSEIF' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_FI' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_PROB' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_SKIP' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_SCORE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_RETURN' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_WHILE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_DO' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ST_OD' (noprec):   reduce statement --> 'ST_SKIP'
    action 'PLUS' (noprec):   reduce statement --> 'ST_SKIP'
    action 'MULTIPLY' (noprec):   reduce statement --> 'ST_SKIP'
    action 'MINUS' (noprec):   reduce statement --> 'ST_SKIP'
    action 'COMMA' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ASSIGN' (noprec):   reduce statement --> 'ST_SKIP'
    action 'TILDE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'HAT' (noprec):   reduce statement --> 'ST_SKIP'
    action 'LPAREN' (noprec):   reduce statement --> 'ST_SKIP'
    action 'RPAREN' (noprec):   reduce statement --> 'ST_SKIP'
    action 'LBKT' (noprec):   reduce statement --> 'ST_SKIP'
    action 'RBKT' (noprec):   reduce statement --> 'ST_SKIP'
    action 'VBAR' (noprec):   reduce statement --> 'ST_SKIP'
    action 'NEWLINE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce statement --> 'ST_SKIP'
    action 'EOF' (noprec):   reduce statement --> 'ST_SKIP'
    action 'SEMI_COLON' (noprec):   reduce statement --> 'ST_SKIP'
    action 'END' (noprec):   reduce statement --> 'ST_SKIP'
    action 'DOUBLE' (noprec):   reduce statement --> 'ST_SKIP'
    action 'INT' (noprec):   reduce statement --> 'ST_SKIP'
    action 'ID' (noprec):   reduce statement --> 'ST_SKIP'
    action 'error' (noprec):   reduce statement --> 'ST_SKIP'
    action '#' (noprec):   reduce statement --> 'ST_SKIP'
    action '$$' (noprec):   reduce statement --> 'ST_SKIP'
  immediate action:   reduce statement --> 'ST_SKIP'  gotos:state 59:  items:    statement -> 'ST_BREAK' . 
  actions:    action 'ERROR' (noprec):   reduce statement --> 'ST_BREAK'
    action 'KW_CONFIG' (noprec):   reduce statement --> 'ST_BREAK'
    action 'TRUE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'FALSE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'AND' (noprec):   reduce statement --> 'ST_BREAK'
    action 'OR' (noprec):   reduce statement --> 'ST_BREAK'
    action 'GE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'LE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'EQ' (noprec):   reduce statement --> 'ST_BREAK'
    action 'NEQ' (noprec):   reduce statement --> 'ST_BREAK'
    action 'LANGLE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'RANGLE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_SAMPLE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_BREAK' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_IF' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_THEN' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_ELSE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_ELSEIF' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_FI' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_PROB' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_SKIP' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_SCORE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_RETURN' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_WHILE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_DO' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ST_OD' (noprec):   reduce statement --> 'ST_BREAK'
    action 'PLUS' (noprec):   reduce statement --> 'ST_BREAK'
    action 'MULTIPLY' (noprec):   reduce statement --> 'ST_BREAK'
    action 'MINUS' (noprec):   reduce statement --> 'ST_BREAK'
    action 'COMMA' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ASSIGN' (noprec):   reduce statement --> 'ST_BREAK'
    action 'TILDE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'HAT' (noprec):   reduce statement --> 'ST_BREAK'
    action 'LPAREN' (noprec):   reduce statement --> 'ST_BREAK'
    action 'RPAREN' (noprec):   reduce statement --> 'ST_BREAK'
    action 'LBKT' (noprec):   reduce statement --> 'ST_BREAK'
    action 'RBKT' (noprec):   reduce statement --> 'ST_BREAK'
    action 'VBAR' (noprec):   reduce statement --> 'ST_BREAK'
    action 'NEWLINE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce statement --> 'ST_BREAK'
    action 'EOF' (noprec):   reduce statement --> 'ST_BREAK'
    action 'SEMI_COLON' (noprec):   reduce statement --> 'ST_BREAK'
    action 'END' (noprec):   reduce statement --> 'ST_BREAK'
    action 'DOUBLE' (noprec):   reduce statement --> 'ST_BREAK'
    action 'INT' (noprec):   reduce statement --> 'ST_BREAK'
    action 'ID' (noprec):   reduce statement --> 'ST_BREAK'
    action 'error' (noprec):   reduce statement --> 'ST_BREAK'
    action '#' (noprec):   reduce statement --> 'ST_BREAK'
    action '$$' (noprec):   reduce statement --> 'ST_BREAK'
  immediate action:   reduce statement --> 'ST_BREAK'  gotos:state 60:  items:    statement -> assignment_statement . 
  actions:    action 'ERROR' (noprec):   reduce statement --> assignment_statement
    action 'KW_CONFIG' (noprec):   reduce statement --> assignment_statement
    action 'TRUE' (noprec):   reduce statement --> assignment_statement
    action 'FALSE' (noprec):   reduce statement --> assignment_statement
    action 'AND' (noprec):   reduce statement --> assignment_statement
    action 'OR' (noprec):   reduce statement --> assignment_statement
    action 'GE' (noprec):   reduce statement --> assignment_statement
    action 'LE' (noprec):   reduce statement --> assignment_statement
    action 'EQ' (noprec):   reduce statement --> assignment_statement
    action 'NEQ' (noprec):   reduce statement --> assignment_statement
    action 'LANGLE' (noprec):   reduce statement --> assignment_statement
    action 'RANGLE' (noprec):   reduce statement --> assignment_statement
    action 'ST_SAMPLE' (noprec):   reduce statement --> assignment_statement
    action 'ST_BREAK' (noprec):   reduce statement --> assignment_statement
    action 'ST_IF' (noprec):   reduce statement --> assignment_statement
    action 'ST_THEN' (noprec):   reduce statement --> assignment_statement
    action 'ST_ELSE' (noprec):   reduce statement --> assignment_statement
    action 'ST_ELSEIF' (noprec):   reduce statement --> assignment_statement
    action 'ST_FI' (noprec):   reduce statement --> assignment_statement
    action 'ST_PROB' (noprec):   reduce statement --> assignment_statement
    action 'ST_SKIP' (noprec):   reduce statement --> assignment_statement
    action 'ST_SCORE' (noprec):   reduce statement --> assignment_statement
    action 'ST_RETURN' (noprec):   reduce statement --> assignment_statement
    action 'ST_WHILE' (noprec):   reduce statement --> assignment_statement
    action 'ST_DO' (noprec):   reduce statement --> assignment_statement
    action 'ST_OD' (noprec):   reduce statement --> assignment_statement
    action 'PLUS' (noprec):   reduce statement --> assignment_statement
    action 'MULTIPLY' (noprec):   reduce statement --> assignment_statement
    action 'MINUS' (noprec):   reduce statement --> assignment_statement
    action 'COMMA' (noprec):   reduce statement --> assignment_statement
    action 'ASSIGN' (noprec):   reduce statement --> assignment_statement
    action 'TILDE' (noprec):   reduce statement --> assignment_statement
    action 'HAT' (noprec):   reduce statement --> assignment_statement
    action 'LPAREN' (noprec):   reduce statement --> assignment_statement
    action 'RPAREN' (noprec):   reduce statement --> assignment_statement
    action 'LBKT' (noprec):   reduce statement --> assignment_statement
    action 'RBKT' (noprec):   reduce statement --> assignment_statement
    action 'VBAR' (noprec):   reduce statement --> assignment_statement
    action 'NEWLINE' (noprec):   reduce statement --> assignment_statement
    action 'END_BLOCK_COMMENTING' (noprec):   reduce statement --> assignment_statement
    action 'EOF' (noprec):   reduce statement --> assignment_statement
    action 'SEMI_COLON' (noprec):   reduce statement --> assignment_statement
    action 'END' (noprec):   reduce statement --> assignment_statement
    action 'DOUBLE' (noprec):   reduce statement --> assignment_statement
    action 'INT' (noprec):   reduce statement --> assignment_statement
    action 'ID' (noprec):   reduce statement --> assignment_statement
    action 'error' (noprec):   reduce statement --> assignment_statement
    action '#' (noprec):   reduce statement --> assignment_statement
    action '$$' (noprec):   reduce statement --> assignment_statement
  immediate action:   reduce statement --> assignment_statement  gotos:state 61:  items:    statement -> if_statement . 
  actions:    action 'ERROR' (noprec):   reduce statement --> if_statement
    action 'KW_CONFIG' (noprec):   reduce statement --> if_statement
    action 'TRUE' (noprec):   reduce statement --> if_statement
    action 'FALSE' (noprec):   reduce statement --> if_statement
    action 'AND' (noprec):   reduce statement --> if_statement
    action 'OR' (noprec):   reduce statement --> if_statement
    action 'GE' (noprec):   reduce statement --> if_statement
    action 'LE' (noprec):   reduce statement --> if_statement
    action 'EQ' (noprec):   reduce statement --> if_statement
    action 'NEQ' (noprec):   reduce statement --> if_statement
    action 'LANGLE' (noprec):   reduce statement --> if_statement
    action 'RANGLE' (noprec):   reduce statement --> if_statement
    action 'ST_SAMPLE' (noprec):   reduce statement --> if_statement
    action 'ST_BREAK' (noprec):   reduce statement --> if_statement
    action 'ST_IF' (noprec):   reduce statement --> if_statement
    action 'ST_THEN' (noprec):   reduce statement --> if_statement
    action 'ST_ELSE' (noprec):   reduce statement --> if_statement
    action 'ST_ELSEIF' (noprec):   reduce statement --> if_statement
    action 'ST_FI' (noprec):   reduce statement --> if_statement
    action 'ST_PROB' (noprec):   reduce statement --> if_statement
    action 'ST_SKIP' (noprec):   reduce statement --> if_statement
    action 'ST_SCORE' (noprec):   reduce statement --> if_statement
    action 'ST_RETURN' (noprec):   reduce statement --> if_statement
    action 'ST_WHILE' (noprec):   reduce statement --> if_statement
    action 'ST_DO' (noprec):   reduce statement --> if_statement
    action 'ST_OD' (noprec):   reduce statement --> if_statement
    action 'PLUS' (noprec):   reduce statement --> if_statement
    action 'MULTIPLY' (noprec):   reduce statement --> if_statement
    action 'MINUS' (noprec):   reduce statement --> if_statement
    action 'COMMA' (noprec):   reduce statement --> if_statement
    action 'ASSIGN' (noprec):   reduce statement --> if_statement
    action 'TILDE' (noprec):   reduce statement --> if_statement
    action 'HAT' (noprec):   reduce statement --> if_statement
    action 'LPAREN' (noprec):   reduce statement --> if_statement
    action 'RPAREN' (noprec):   reduce statement --> if_statement
    action 'LBKT' (noprec):   reduce statement --> if_statement
    action 'RBKT' (noprec):   reduce statement --> if_statement
    action 'VBAR' (noprec):   reduce statement --> if_statement
    action 'NEWLINE' (noprec):   reduce statement --> if_statement
    action 'END_BLOCK_COMMENTING' (noprec):   reduce statement --> if_statement
    action 'EOF' (noprec):   reduce statement --> if_statement
    action 'SEMI_COLON' (noprec):   reduce statement --> if_statement
    action 'END' (noprec):   reduce statement --> if_statement
    action 'DOUBLE' (noprec):   reduce statement --> if_statement
    action 'INT' (noprec):   reduce statement --> if_statement
    action 'ID' (noprec):   reduce statement --> if_statement
    action 'error' (noprec):   reduce statement --> if_statement
    action '#' (noprec):   reduce statement --> if_statement
    action '$$' (noprec):   reduce statement --> if_statement
  immediate action:   reduce statement --> if_statement  gotos:state 62:  items:    statement -> if_prob_statement . 
  actions:    action 'ERROR' (noprec):   reduce statement --> if_prob_statement
    action 'KW_CONFIG' (noprec):   reduce statement --> if_prob_statement
    action 'TRUE' (noprec):   reduce statement --> if_prob_statement
    action 'FALSE' (noprec):   reduce statement --> if_prob_statement
    action 'AND' (noprec):   reduce statement --> if_prob_statement
    action 'OR' (noprec):   reduce statement --> if_prob_statement
    action 'GE' (noprec):   reduce statement --> if_prob_statement
    action 'LE' (noprec):   reduce statement --> if_prob_statement
    action 'EQ' (noprec):   reduce statement --> if_prob_statement
    action 'NEQ' (noprec):   reduce statement --> if_prob_statement
    action 'LANGLE' (noprec):   reduce statement --> if_prob_statement
    action 'RANGLE' (noprec):   reduce statement --> if_prob_statement
    action 'ST_SAMPLE' (noprec):   reduce statement --> if_prob_statement
    action 'ST_BREAK' (noprec):   reduce statement --> if_prob_statement
    action 'ST_IF' (noprec):   reduce statement --> if_prob_statement
    action 'ST_THEN' (noprec):   reduce statement --> if_prob_statement
    action 'ST_ELSE' (noprec):   reduce statement --> if_prob_statement
    action 'ST_ELSEIF' (noprec):   reduce statement --> if_prob_statement
    action 'ST_FI' (noprec):   reduce statement --> if_prob_statement
    action 'ST_PROB' (noprec):   reduce statement --> if_prob_statement
    action 'ST_SKIP' (noprec):   reduce statement --> if_prob_statement
    action 'ST_SCORE' (noprec):   reduce statement --> if_prob_statement
    action 'ST_RETURN' (noprec):   reduce statement --> if_prob_statement
    action 'ST_WHILE' (noprec):   reduce statement --> if_prob_statement
    action 'ST_DO' (noprec):   reduce statement --> if_prob_statement
    action 'ST_OD' (noprec):   reduce statement --> if_prob_statement
    action 'PLUS' (noprec):   reduce statement --> if_prob_statement
    action 'MULTIPLY' (noprec):   reduce statement --> if_prob_statement
    action 'MINUS' (noprec):   reduce statement --> if_prob_statement
    action 'COMMA' (noprec):   reduce statement --> if_prob_statement
    action 'ASSIGN' (noprec):   reduce statement --> if_prob_statement
    action 'TILDE' (noprec):   reduce statement --> if_prob_statement
    action 'HAT' (noprec):   reduce statement --> if_prob_statement
    action 'LPAREN' (noprec):   reduce statement --> if_prob_statement
    action 'RPAREN' (noprec):   reduce statement --> if_prob_statement
    action 'LBKT' (noprec):   reduce statement --> if_prob_statement
    action 'RBKT' (noprec):   reduce statement --> if_prob_statement
    action 'VBAR' (noprec):   reduce statement --> if_prob_statement
    action 'NEWLINE' (noprec):   reduce statement --> if_prob_statement
    action 'END_BLOCK_COMMENTING' (noprec):   reduce statement --> if_prob_statement
    action 'EOF' (noprec):   reduce statement --> if_prob_statement
    action 'SEMI_COLON' (noprec):   reduce statement --> if_prob_statement
    action 'END' (noprec):   reduce statement --> if_prob_statement
    action 'DOUBLE' (noprec):   reduce statement --> if_prob_statement
    action 'INT' (noprec):   reduce statement --> if_prob_statement
    action 'ID' (noprec):   reduce statement --> if_prob_statement
    action 'error' (noprec):   reduce statement --> if_prob_statement
    action '#' (noprec):   reduce statement --> if_prob_statement
    action '$$' (noprec):   reduce statement --> if_prob_statement
  immediate action:   reduce statement --> if_prob_statement  gotos:state 63:  items:    statement -> in_loop_score_statement . 
  actions:    action 'ERROR' (noprec):   reduce statement --> in_loop_score_statement
    action 'KW_CONFIG' (noprec):   reduce statement --> in_loop_score_statement
    action 'TRUE' (noprec):   reduce statement --> in_loop_score_statement
    action 'FALSE' (noprec):   reduce statement --> in_loop_score_statement
    action 'AND' (noprec):   reduce statement --> in_loop_score_statement
    action 'OR' (noprec):   reduce statement --> in_loop_score_statement
    action 'GE' (noprec):   reduce statement --> in_loop_score_statement
    action 'LE' (noprec):   reduce statement --> in_loop_score_statement
    action 'EQ' (noprec):   reduce statement --> in_loop_score_statement
    action 'NEQ' (noprec):   reduce statement --> in_loop_score_statement
    action 'LANGLE' (noprec):   reduce statement --> in_loop_score_statement
    action 'RANGLE' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_SAMPLE' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_BREAK' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_IF' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_THEN' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_ELSE' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_ELSEIF' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_FI' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_PROB' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_SKIP' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_SCORE' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_RETURN' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_WHILE' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_DO' (noprec):   reduce statement --> in_loop_score_statement
    action 'ST_OD' (noprec):   reduce statement --> in_loop_score_statement
    action 'PLUS' (noprec):   reduce statement --> in_loop_score_statement
    action 'MULTIPLY' (noprec):   reduce statement --> in_loop_score_statement
    action 'MINUS' (noprec):   reduce statement --> in_loop_score_statement
    action 'COMMA' (noprec):   reduce statement --> in_loop_score_statement
    action 'ASSIGN' (noprec):   reduce statement --> in_loop_score_statement
    action 'TILDE' (noprec):   reduce statement --> in_loop_score_statement
    action 'HAT' (noprec):   reduce statement --> in_loop_score_statement
    action 'LPAREN' (noprec):   reduce statement --> in_loop_score_statement
    action 'RPAREN' (noprec):   reduce statement --> in_loop_score_statement
    action 'LBKT' (noprec):   reduce statement --> in_loop_score_statement
    action 'RBKT' (noprec):   reduce statement --> in_loop_score_statement
    action 'VBAR' (noprec):   reduce statement --> in_loop_score_statement
    action 'NEWLINE' (noprec):   reduce statement --> in_loop_score_statement
    action 'END_BLOCK_COMMENTING' (noprec):   reduce statement --> in_loop_score_statement
    action 'EOF' (noprec):   reduce statement --> in_loop_score_statement
    action 'SEMI_COLON' (noprec):   reduce statement --> in_loop_score_statement
    action 'END' (noprec):   reduce statement --> in_loop_score_statement
    action 'DOUBLE' (noprec):   reduce statement --> in_loop_score_statement
    action 'INT' (noprec):   reduce statement --> in_loop_score_statement
    action 'ID' (noprec):   reduce statement --> in_loop_score_statement
    action 'error' (noprec):   reduce statement --> in_loop_score_statement
    action '#' (noprec):   reduce statement --> in_loop_score_statement
    action '$$' (noprec):   reduce statement --> in_loop_score_statement
  immediate action:   reduce statement --> in_loop_score_statement  gotos:state 64:  items:    in_loop_score_statement -> 'ST_SCORE' . 'LPAREN' arith_expr 'RPAREN'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 65
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 65:  items:    in_loop_score_statement -> 'ST_SCORE' 'LPAREN' . arith_expr 'RPAREN'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 98
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 66
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
state 66:  items:    in_loop_score_statement -> 'ST_SCORE' 'LPAREN' arith_expr . 'RPAREN'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   shift 67
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 67:  items:    in_loop_score_statement -> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN' . 
  actions:    action 'ERROR' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'KW_CONFIG' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'TRUE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'FALSE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'AND' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'OR' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'GE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'LE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'EQ' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'NEQ' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'LANGLE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'RANGLE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_SAMPLE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_BREAK' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_IF' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_THEN' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_ELSE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_ELSEIF' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_FI' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_PROB' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_SKIP' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_SCORE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_RETURN' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_WHILE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_DO' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ST_OD' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'PLUS' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'MULTIPLY' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'MINUS' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'COMMA' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ASSIGN' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'TILDE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'HAT' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'LPAREN' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'RPAREN' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'LBKT' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'RBKT' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'VBAR' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'NEWLINE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'EOF' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'SEMI_COLON' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'END' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'DOUBLE' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'INT' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'ID' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action 'error' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action '#' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
    action '$$' (noprec):   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'
  immediate action:   reduce in_loop_score_statement --> 'ST_SCORE' 'LPAREN' arith_expr 'RPAREN'  gotos:state 68:  items:    if_statement -> 'ST_IF' . bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    if_prob_statement -> 'ST_IF' . 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   shift 116
    action 'FALSE' (noprec):   shift 117
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   shift 79
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 99
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 112
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
    goto bool_expr: 69
    goto and_bool_expr: 108
    goto bool_expr_element: 111
    goto bool_expr_constant: 115
state 69:  items:    if_statement -> 'ST_IF' bool_expr . 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   shift 70
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 70:  items:    if_statement -> 'ST_IF' bool_expr 'ST_THEN' . non_loop_statements optional_elseif_seq 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   shift 59
    action 'ST_IF' (noprec):   shift 68
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   shift 58
    action 'ST_SCORE' (noprec):   shift 64
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 52
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto assignment_statement: 60
    goto non_loop_statements: 71
    goto statement: 55
    goto in_loop_score_statement: 63
    goto if_statement: 61
    goto if_prob_statement: 62
state 71:  items:    if_statement -> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements . optional_elseif_seq 'ST_FI'
  actions:    action 'ERROR' (noprec):   reduce optional_elseif_seq --> 
    action 'KW_CONFIG' (noprec):   reduce optional_elseif_seq --> 
    action 'TRUE' (noprec):   reduce optional_elseif_seq --> 
    action 'FALSE' (noprec):   reduce optional_elseif_seq --> 
    action 'AND' (noprec):   reduce optional_elseif_seq --> 
    action 'OR' (noprec):   reduce optional_elseif_seq --> 
    action 'GE' (noprec):   reduce optional_elseif_seq --> 
    action 'LE' (noprec):   reduce optional_elseif_seq --> 
    action 'EQ' (noprec):   reduce optional_elseif_seq --> 
    action 'NEQ' (noprec):   reduce optional_elseif_seq --> 
    action 'LANGLE' (noprec):   reduce optional_elseif_seq --> 
    action 'RANGLE' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_SAMPLE' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_BREAK' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_IF' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_THEN' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_ELSE' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_ELSEIF' (noprec):   shift 74
    action 'ST_FI' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_PROB' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_SKIP' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_SCORE' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_RETURN' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_WHILE' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_DO' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_OD' (noprec):   reduce optional_elseif_seq --> 
    action 'PLUS' (noprec):   reduce optional_elseif_seq --> 
    action 'MULTIPLY' (noprec):   reduce optional_elseif_seq --> 
    action 'MINUS' (noprec):   reduce optional_elseif_seq --> 
    action 'COMMA' (noprec):   reduce optional_elseif_seq --> 
    action 'ASSIGN' (noprec):   reduce optional_elseif_seq --> 
    action 'TILDE' (noprec):   reduce optional_elseif_seq --> 
    action 'HAT' (noprec):   reduce optional_elseif_seq --> 
    action 'LPAREN' (noprec):   reduce optional_elseif_seq --> 
    action 'RPAREN' (noprec):   reduce optional_elseif_seq --> 
    action 'LBKT' (noprec):   reduce optional_elseif_seq --> 
    action 'RBKT' (noprec):   reduce optional_elseif_seq --> 
    action 'VBAR' (noprec):   reduce optional_elseif_seq --> 
    action 'NEWLINE' (noprec):   reduce optional_elseif_seq --> 
    action 'END_BLOCK_COMMENTING' (noprec):   reduce optional_elseif_seq --> 
    action 'EOF' (noprec):   reduce optional_elseif_seq --> 
    action 'SEMI_COLON' (noprec):   reduce optional_elseif_seq --> 
    action 'END' (noprec):   reduce optional_elseif_seq --> 
    action 'DOUBLE' (noprec):   reduce optional_elseif_seq --> 
    action 'INT' (noprec):   reduce optional_elseif_seq --> 
    action 'ID' (noprec):   reduce optional_elseif_seq --> 
    action 'error' (noprec):   reduce optional_elseif_seq --> 
    action '#' (noprec):   reduce optional_elseif_seq --> 
    action '$$' (noprec):   reduce optional_elseif_seq --> 
  immediate action: <none>  gotos:    goto optional_elseif_seq: 72
state 72:  items:    if_statement -> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq . 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   shift 73
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 73:  items:    if_statement -> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI' . 
  actions:    action 'ERROR' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'KW_CONFIG' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'TRUE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'FALSE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'AND' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'OR' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'GE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'LE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'EQ' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'NEQ' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'LANGLE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'RANGLE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_SAMPLE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_BREAK' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_IF' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_THEN' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_ELSE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_ELSEIF' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_FI' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_PROB' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_SKIP' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_SCORE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_RETURN' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_WHILE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_DO' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ST_OD' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'PLUS' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'MULTIPLY' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'MINUS' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'COMMA' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ASSIGN' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'TILDE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'HAT' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'LPAREN' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'RPAREN' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'LBKT' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'RBKT' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'VBAR' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'NEWLINE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'EOF' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'SEMI_COLON' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'END' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'DOUBLE' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'INT' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'ID' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action 'error' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action '#' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
    action '$$' (noprec):   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'
  immediate action:   reduce if_statement --> 'ST_IF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq 'ST_FI'  gotos:state 74:  items:    optional_elseif_seq -> 'ST_ELSEIF' . bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   shift 116
    action 'FALSE' (noprec):   shift 117
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 99
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 112
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
    goto bool_expr: 75
    goto and_bool_expr: 108
    goto bool_expr_element: 111
    goto bool_expr_constant: 115
state 75:  items:    optional_elseif_seq -> 'ST_ELSEIF' bool_expr . 'ST_THEN' non_loop_statements optional_elseif_seq
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   shift 76
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 76:  items:    optional_elseif_seq -> 'ST_ELSEIF' bool_expr 'ST_THEN' . non_loop_statements optional_elseif_seq
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   shift 59
    action 'ST_IF' (noprec):   shift 68
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   shift 58
    action 'ST_SCORE' (noprec):   shift 64
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 52
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto assignment_statement: 60
    goto non_loop_statements: 77
    goto statement: 55
    goto in_loop_score_statement: 63
    goto if_statement: 61
    goto if_prob_statement: 62
state 77:  items:    optional_elseif_seq -> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements . optional_elseif_seq
  actions:    action 'ERROR' (noprec):   reduce optional_elseif_seq --> 
    action 'KW_CONFIG' (noprec):   reduce optional_elseif_seq --> 
    action 'TRUE' (noprec):   reduce optional_elseif_seq --> 
    action 'FALSE' (noprec):   reduce optional_elseif_seq --> 
    action 'AND' (noprec):   reduce optional_elseif_seq --> 
    action 'OR' (noprec):   reduce optional_elseif_seq --> 
    action 'GE' (noprec):   reduce optional_elseif_seq --> 
    action 'LE' (noprec):   reduce optional_elseif_seq --> 
    action 'EQ' (noprec):   reduce optional_elseif_seq --> 
    action 'NEQ' (noprec):   reduce optional_elseif_seq --> 
    action 'LANGLE' (noprec):   reduce optional_elseif_seq --> 
    action 'RANGLE' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_SAMPLE' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_BREAK' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_IF' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_THEN' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_ELSE' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_ELSEIF' (noprec):   shift 74
    action 'ST_FI' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_PROB' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_SKIP' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_SCORE' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_RETURN' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_WHILE' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_DO' (noprec):   reduce optional_elseif_seq --> 
    action 'ST_OD' (noprec):   reduce optional_elseif_seq --> 
    action 'PLUS' (noprec):   reduce optional_elseif_seq --> 
    action 'MULTIPLY' (noprec):   reduce optional_elseif_seq --> 
    action 'MINUS' (noprec):   reduce optional_elseif_seq --> 
    action 'COMMA' (noprec):   reduce optional_elseif_seq --> 
    action 'ASSIGN' (noprec):   reduce optional_elseif_seq --> 
    action 'TILDE' (noprec):   reduce optional_elseif_seq --> 
    action 'HAT' (noprec):   reduce optional_elseif_seq --> 
    action 'LPAREN' (noprec):   reduce optional_elseif_seq --> 
    action 'RPAREN' (noprec):   reduce optional_elseif_seq --> 
    action 'LBKT' (noprec):   reduce optional_elseif_seq --> 
    action 'RBKT' (noprec):   reduce optional_elseif_seq --> 
    action 'VBAR' (noprec):   reduce optional_elseif_seq --> 
    action 'NEWLINE' (noprec):   reduce optional_elseif_seq --> 
    action 'END_BLOCK_COMMENTING' (noprec):   reduce optional_elseif_seq --> 
    action 'EOF' (noprec):   reduce optional_elseif_seq --> 
    action 'SEMI_COLON' (noprec):   reduce optional_elseif_seq --> 
    action 'END' (noprec):   reduce optional_elseif_seq --> 
    action 'DOUBLE' (noprec):   reduce optional_elseif_seq --> 
    action 'INT' (noprec):   reduce optional_elseif_seq --> 
    action 'ID' (noprec):   reduce optional_elseif_seq --> 
    action 'error' (noprec):   reduce optional_elseif_seq --> 
    action '#' (noprec):   reduce optional_elseif_seq --> 
    action '$$' (noprec):   reduce optional_elseif_seq --> 
  immediate action: <none>  gotos:    goto optional_elseif_seq: 78
state 78:  items:    optional_elseif_seq -> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq . 
  actions:    action 'ERROR' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'KW_CONFIG' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'TRUE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'FALSE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'AND' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'OR' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'GE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'LE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'EQ' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'NEQ' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'LANGLE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'RANGLE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_SAMPLE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_BREAK' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_IF' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_THEN' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_ELSE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_ELSEIF' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_FI' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_PROB' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_SKIP' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_SCORE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_RETURN' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_WHILE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_DO' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ST_OD' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'PLUS' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'MULTIPLY' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'MINUS' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'COMMA' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ASSIGN' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'TILDE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'HAT' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'LPAREN' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'RPAREN' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'LBKT' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'RBKT' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'VBAR' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'NEWLINE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'END_BLOCK_COMMENTING' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'EOF' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'SEMI_COLON' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'END' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'DOUBLE' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'INT' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'ID' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action 'error' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action '#' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
    action '$$' (noprec):   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq
  immediate action:   reduce optional_elseif_seq --> 'ST_ELSEIF' bool_expr 'ST_THEN' non_loop_statements optional_elseif_seq  gotos:state 79:  items:    if_prob_statement -> 'ST_IF' 'ST_PROB' . 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 80
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 80:  items:    if_prob_statement -> 'ST_IF' 'ST_PROB' 'LPAREN' . arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 98
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 81
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
state 81:  items:    if_prob_statement -> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr . 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   shift 82
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 82:  items:    if_prob_statement -> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' . 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   shift 83
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 83:  items:    if_prob_statement -> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' . non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   shift 59
    action 'ST_IF' (noprec):   shift 68
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   shift 58
    action 'ST_SCORE' (noprec):   shift 64
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 52
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto assignment_statement: 60
    goto non_loop_statements: 84
    goto statement: 55
    goto in_loop_score_statement: 63
    goto if_statement: 61
    goto if_prob_statement: 62
state 84:  items:    if_prob_statement -> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements . 'ST_ELSE' non_loop_statements 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   shift 85
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 85:  items:    if_prob_statement -> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' . non_loop_statements 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   shift 59
    action 'ST_IF' (noprec):   shift 68
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   shift 58
    action 'ST_SCORE' (noprec):   shift 64
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 52
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto assignment_statement: 60
    goto non_loop_statements: 86
    goto statement: 55
    goto in_loop_score_statement: 63
    goto if_statement: 61
    goto if_prob_statement: 62
state 86:  items:    if_prob_statement -> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements . 'ST_FI'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   shift 87
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 87:  items:    if_prob_statement -> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI' . 
  actions:    action 'ERROR' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'KW_CONFIG' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'TRUE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'FALSE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'AND' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'OR' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'GE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'LE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'EQ' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'NEQ' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'LANGLE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'RANGLE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_SAMPLE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_BREAK' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_IF' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_THEN' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_ELSE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_ELSEIF' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_FI' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_PROB' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_SKIP' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_SCORE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_RETURN' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_WHILE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_DO' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ST_OD' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'PLUS' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'MULTIPLY' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'MINUS' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'COMMA' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ASSIGN' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'TILDE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'HAT' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'LPAREN' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'RPAREN' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'LBKT' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'RBKT' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'VBAR' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'NEWLINE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'EOF' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'SEMI_COLON' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'END' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'DOUBLE' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'INT' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'ID' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action 'error' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action '#' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
    action '$$' (noprec):   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'
  immediate action:   reduce if_prob_statement --> 'ST_IF' 'ST_PROB' 'LPAREN' arith_expr 'RPAREN' 'ST_THEN' non_loop_statements 'ST_ELSE' non_loop_statements 'ST_FI'  gotos:state 88:  items:    arith_expr -> mul_level_expr . 'PLUS' arith_expr
    arith_expr -> mul_level_expr . 'MINUS' arith_expr
    arith_expr -> mul_level_expr . 
  actions:    action 'ERROR' (noprec):   reduce arith_expr --> mul_level_expr
    action 'KW_CONFIG' (noprec):   reduce arith_expr --> mul_level_expr
    action 'TRUE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'FALSE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'AND' (noprec):   reduce arith_expr --> mul_level_expr
    action 'OR' (noprec):   reduce arith_expr --> mul_level_expr
    action 'GE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'LE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'EQ' (noprec):   reduce arith_expr --> mul_level_expr
    action 'NEQ' (noprec):   reduce arith_expr --> mul_level_expr
    action 'LANGLE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'RANGLE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_SAMPLE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_BREAK' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_IF' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_THEN' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_ELSE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_ELSEIF' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_FI' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_PROB' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_SKIP' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_SCORE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_RETURN' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_WHILE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_DO' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ST_OD' (noprec):   reduce arith_expr --> mul_level_expr
    action 'PLUS' (noprec):   shift 89
    action 'MULTIPLY' (noprec):   reduce arith_expr --> mul_level_expr
    action 'MINUS' (noprec):   shift 91
    action 'COMMA' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ASSIGN' (noprec):   reduce arith_expr --> mul_level_expr
    action 'TILDE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'HAT' (noprec):   reduce arith_expr --> mul_level_expr
    action 'LPAREN' (noprec):   reduce arith_expr --> mul_level_expr
    action 'RPAREN' (noprec):   reduce arith_expr --> mul_level_expr
    action 'LBKT' (noprec):   reduce arith_expr --> mul_level_expr
    action 'RBKT' (noprec):   reduce arith_expr --> mul_level_expr
    action 'VBAR' (noprec):   reduce arith_expr --> mul_level_expr
    action 'NEWLINE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'END_BLOCK_COMMENTING' (noprec):   reduce arith_expr --> mul_level_expr
    action 'EOF' (noprec):   reduce arith_expr --> mul_level_expr
    action 'SEMI_COLON' (noprec):   reduce arith_expr --> mul_level_expr
    action 'END' (noprec):   reduce arith_expr --> mul_level_expr
    action 'DOUBLE' (noprec):   reduce arith_expr --> mul_level_expr
    action 'INT' (noprec):   reduce arith_expr --> mul_level_expr
    action 'ID' (noprec):   reduce arith_expr --> mul_level_expr
    action 'error' (noprec):   reduce arith_expr --> mul_level_expr
    action '#' (noprec):   reduce arith_expr --> mul_level_expr
    action '$$' (noprec):   reduce arith_expr --> mul_level_expr
  immediate action: <none>  gotos:state 89:  items:    arith_expr -> mul_level_expr 'PLUS' . arith_expr
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 98
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 90
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
state 90:  items:    arith_expr -> mul_level_expr 'PLUS' arith_expr . 
  actions:    action 'ERROR' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'KW_CONFIG' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'TRUE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'FALSE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'AND' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'OR' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'GE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'LE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'EQ' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'NEQ' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'LANGLE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'RANGLE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_SAMPLE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_BREAK' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_IF' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_THEN' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_ELSE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_ELSEIF' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_FI' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_PROB' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_SKIP' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_SCORE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_RETURN' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_WHILE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_DO' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ST_OD' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'PLUS' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'MULTIPLY' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'MINUS' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'COMMA' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ASSIGN' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'TILDE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'HAT' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'LPAREN' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'RPAREN' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'LBKT' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'RBKT' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'VBAR' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'NEWLINE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'END_BLOCK_COMMENTING' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'EOF' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'SEMI_COLON' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'END' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'DOUBLE' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'INT' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'ID' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action 'error' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action '#' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
    action '$$' (noprec):   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr
  immediate action:   reduce arith_expr --> mul_level_expr 'PLUS' arith_expr  gotos:state 91:  items:    arith_expr -> mul_level_expr 'MINUS' . arith_expr
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 98
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 92
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
state 92:  items:    arith_expr -> mul_level_expr 'MINUS' arith_expr . 
  actions:    action 'ERROR' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'KW_CONFIG' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'TRUE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'FALSE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'AND' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'OR' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'GE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'LE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'EQ' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'NEQ' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'LANGLE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'RANGLE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_SAMPLE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_BREAK' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_IF' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_THEN' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_ELSE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_ELSEIF' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_FI' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_PROB' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_SKIP' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_SCORE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_RETURN' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_WHILE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_DO' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ST_OD' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'PLUS' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'MULTIPLY' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'MINUS' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'COMMA' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ASSIGN' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'TILDE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'HAT' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'LPAREN' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'RPAREN' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'LBKT' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'RBKT' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'VBAR' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'NEWLINE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'END_BLOCK_COMMENTING' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'EOF' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'SEMI_COLON' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'END' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'DOUBLE' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'INT' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'ID' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action 'error' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action '#' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
    action '$$' (noprec):   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr
  immediate action:   reduce arith_expr --> mul_level_expr 'MINUS' arith_expr  gotos:state 93:  items:    mul_level_expr -> id_level_expr . 'MULTIPLY' mul_level_expr
    mul_level_expr -> id_level_expr . 
  actions:    action 'ERROR' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'KW_CONFIG' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'TRUE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'FALSE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'AND' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'OR' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'GE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'LE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'EQ' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'NEQ' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'LANGLE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'RANGLE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_SAMPLE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_BREAK' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_IF' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_THEN' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_ELSE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_ELSEIF' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_FI' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_PROB' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_SKIP' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_SCORE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_RETURN' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_WHILE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_DO' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ST_OD' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'PLUS' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'MULTIPLY' (noprec):   shift 94
    action 'MINUS' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'COMMA' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ASSIGN' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'TILDE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'HAT' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'LPAREN' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'RPAREN' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'LBKT' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'RBKT' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'VBAR' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'NEWLINE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'END_BLOCK_COMMENTING' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'EOF' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'SEMI_COLON' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'END' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'DOUBLE' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'INT' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'ID' (noprec):   reduce mul_level_expr --> id_level_expr
    action 'error' (noprec):   reduce mul_level_expr --> id_level_expr
    action '#' (noprec):   reduce mul_level_expr --> id_level_expr
    action '$$' (noprec):   reduce mul_level_expr --> id_level_expr
  immediate action: <none>  gotos:state 94:  items:    mul_level_expr -> id_level_expr 'MULTIPLY' . mul_level_expr
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 98
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto mul_level_expr: 95
    goto id_level_expr: 93
    goto number: 97
state 95:  items:    mul_level_expr -> id_level_expr 'MULTIPLY' mul_level_expr . 
  actions:    action 'ERROR' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'KW_CONFIG' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'TRUE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'FALSE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'AND' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'OR' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'GE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'LE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'EQ' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'NEQ' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'LANGLE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'RANGLE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_SAMPLE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_BREAK' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_IF' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_THEN' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_ELSE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_ELSEIF' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_FI' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_PROB' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_SKIP' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_SCORE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_RETURN' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_WHILE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_DO' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ST_OD' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'PLUS' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'MULTIPLY' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'MINUS' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'COMMA' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ASSIGN' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'TILDE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'HAT' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'LPAREN' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'RPAREN' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'LBKT' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'RBKT' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'VBAR' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'NEWLINE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'END_BLOCK_COMMENTING' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'EOF' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'SEMI_COLON' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'END' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'DOUBLE' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'INT' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'ID' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action 'error' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action '#' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
    action '$$' (noprec):   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr
  immediate action:   reduce mul_level_expr --> id_level_expr 'MULTIPLY' mul_level_expr  gotos:state 96:  items:    id_level_expr -> 'ID' . 
  actions:    action 'ERROR' (noprec):   reduce id_level_expr --> 'ID'
    action 'KW_CONFIG' (noprec):   reduce id_level_expr --> 'ID'
    action 'TRUE' (noprec):   reduce id_level_expr --> 'ID'
    action 'FALSE' (noprec):   reduce id_level_expr --> 'ID'
    action 'AND' (noprec):   reduce id_level_expr --> 'ID'
    action 'OR' (noprec):   reduce id_level_expr --> 'ID'
    action 'GE' (noprec):   reduce id_level_expr --> 'ID'
    action 'LE' (noprec):   reduce id_level_expr --> 'ID'
    action 'EQ' (noprec):   reduce id_level_expr --> 'ID'
    action 'NEQ' (noprec):   reduce id_level_expr --> 'ID'
    action 'LANGLE' (noprec):   reduce id_level_expr --> 'ID'
    action 'RANGLE' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_SAMPLE' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_BREAK' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_IF' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_THEN' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_ELSE' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_ELSEIF' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_FI' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_PROB' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_SKIP' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_SCORE' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_RETURN' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_WHILE' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_DO' (noprec):   reduce id_level_expr --> 'ID'
    action 'ST_OD' (noprec):   reduce id_level_expr --> 'ID'
    action 'PLUS' (noprec):   reduce id_level_expr --> 'ID'
    action 'MULTIPLY' (noprec):   reduce id_level_expr --> 'ID'
    action 'MINUS' (noprec):   reduce id_level_expr --> 'ID'
    action 'COMMA' (noprec):   reduce id_level_expr --> 'ID'
    action 'ASSIGN' (noprec):   reduce id_level_expr --> 'ID'
    action 'TILDE' (noprec):   reduce id_level_expr --> 'ID'
    action 'HAT' (noprec):   reduce id_level_expr --> 'ID'
    action 'LPAREN' (noprec):   reduce id_level_expr --> 'ID'
    action 'RPAREN' (noprec):   reduce id_level_expr --> 'ID'
    action 'LBKT' (noprec):   reduce id_level_expr --> 'ID'
    action 'RBKT' (noprec):   reduce id_level_expr --> 'ID'
    action 'VBAR' (noprec):   reduce id_level_expr --> 'ID'
    action 'NEWLINE' (noprec):   reduce id_level_expr --> 'ID'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce id_level_expr --> 'ID'
    action 'EOF' (noprec):   reduce id_level_expr --> 'ID'
    action 'SEMI_COLON' (noprec):   reduce id_level_expr --> 'ID'
    action 'END' (noprec):   reduce id_level_expr --> 'ID'
    action 'DOUBLE' (noprec):   reduce id_level_expr --> 'ID'
    action 'INT' (noprec):   reduce id_level_expr --> 'ID'
    action 'ID' (noprec):   reduce id_level_expr --> 'ID'
    action 'error' (noprec):   reduce id_level_expr --> 'ID'
    action '#' (noprec):   reduce id_level_expr --> 'ID'
    action '$$' (noprec):   reduce id_level_expr --> 'ID'
  immediate action:   reduce id_level_expr --> 'ID'  gotos:state 97:  items:    id_level_expr -> number . 
  actions:    action 'ERROR' (noprec):   reduce id_level_expr --> number
    action 'KW_CONFIG' (noprec):   reduce id_level_expr --> number
    action 'TRUE' (noprec):   reduce id_level_expr --> number
    action 'FALSE' (noprec):   reduce id_level_expr --> number
    action 'AND' (noprec):   reduce id_level_expr --> number
    action 'OR' (noprec):   reduce id_level_expr --> number
    action 'GE' (noprec):   reduce id_level_expr --> number
    action 'LE' (noprec):   reduce id_level_expr --> number
    action 'EQ' (noprec):   reduce id_level_expr --> number
    action 'NEQ' (noprec):   reduce id_level_expr --> number
    action 'LANGLE' (noprec):   reduce id_level_expr --> number
    action 'RANGLE' (noprec):   reduce id_level_expr --> number
    action 'ST_SAMPLE' (noprec):   reduce id_level_expr --> number
    action 'ST_BREAK' (noprec):   reduce id_level_expr --> number
    action 'ST_IF' (noprec):   reduce id_level_expr --> number
    action 'ST_THEN' (noprec):   reduce id_level_expr --> number
    action 'ST_ELSE' (noprec):   reduce id_level_expr --> number
    action 'ST_ELSEIF' (noprec):   reduce id_level_expr --> number
    action 'ST_FI' (noprec):   reduce id_level_expr --> number
    action 'ST_PROB' (noprec):   reduce id_level_expr --> number
    action 'ST_SKIP' (noprec):   reduce id_level_expr --> number
    action 'ST_SCORE' (noprec):   reduce id_level_expr --> number
    action 'ST_RETURN' (noprec):   reduce id_level_expr --> number
    action 'ST_WHILE' (noprec):   reduce id_level_expr --> number
    action 'ST_DO' (noprec):   reduce id_level_expr --> number
    action 'ST_OD' (noprec):   reduce id_level_expr --> number
    action 'PLUS' (noprec):   reduce id_level_expr --> number
    action 'MULTIPLY' (noprec):   reduce id_level_expr --> number
    action 'MINUS' (noprec):   reduce id_level_expr --> number
    action 'COMMA' (noprec):   reduce id_level_expr --> number
    action 'ASSIGN' (noprec):   reduce id_level_expr --> number
    action 'TILDE' (noprec):   reduce id_level_expr --> number
    action 'HAT' (noprec):   reduce id_level_expr --> number
    action 'LPAREN' (noprec):   reduce id_level_expr --> number
    action 'RPAREN' (noprec):   reduce id_level_expr --> number
    action 'LBKT' (noprec):   reduce id_level_expr --> number
    action 'RBKT' (noprec):   reduce id_level_expr --> number
    action 'VBAR' (noprec):   reduce id_level_expr --> number
    action 'NEWLINE' (noprec):   reduce id_level_expr --> number
    action 'END_BLOCK_COMMENTING' (noprec):   reduce id_level_expr --> number
    action 'EOF' (noprec):   reduce id_level_expr --> number
    action 'SEMI_COLON' (noprec):   reduce id_level_expr --> number
    action 'END' (noprec):   reduce id_level_expr --> number
    action 'DOUBLE' (noprec):   reduce id_level_expr --> number
    action 'INT' (noprec):   reduce id_level_expr --> number
    action 'ID' (noprec):   reduce id_level_expr --> number
    action 'error' (noprec):   reduce id_level_expr --> number
    action '#' (noprec):   reduce id_level_expr --> number
    action '$$' (noprec):   reduce id_level_expr --> number
  immediate action:   reduce id_level_expr --> number  gotos:state 98:  items:    id_level_expr -> 'LPAREN' . arith_expr 'RPAREN'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 98
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 100
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
state 99:  items:    id_level_expr -> 'LPAREN' . arith_expr 'RPAREN'
    bool_expr_constant -> 'LPAREN' . bool_expr 'RPAREN'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   shift 116
    action 'FALSE' (noprec):   shift 117
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 99
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 101
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
    goto bool_expr: 118
    goto and_bool_expr: 108
    goto bool_expr_element: 111
    goto bool_expr_constant: 115
state 100:  items:    id_level_expr -> 'LPAREN' arith_expr . 'RPAREN'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   shift 102
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 101:  items:    id_level_expr -> 'LPAREN' arith_expr . 'RPAREN'
    bool_expr_element -> arith_expr . cmp_op arith_expr
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   shift 121
    action 'LE' (noprec):   shift 120
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   shift 122
    action 'RANGLE' (noprec):   shift 123
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   shift 102
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto cmp_op: 113
state 102:  items:    id_level_expr -> 'LPAREN' arith_expr 'RPAREN' . 
  actions:    action 'ERROR' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'KW_CONFIG' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'TRUE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'FALSE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'AND' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'OR' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'GE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'LE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'EQ' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'NEQ' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'LANGLE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'RANGLE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_SAMPLE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_BREAK' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_IF' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_THEN' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_ELSE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_ELSEIF' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_FI' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_PROB' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_SKIP' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_SCORE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_RETURN' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_WHILE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_DO' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ST_OD' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'PLUS' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'MULTIPLY' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'MINUS' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'COMMA' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ASSIGN' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'TILDE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'HAT' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'LPAREN' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'RPAREN' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'LBKT' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'RBKT' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'VBAR' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'NEWLINE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'EOF' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'SEMI_COLON' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'END' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'DOUBLE' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'INT' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'ID' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action 'error' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action '#' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
    action '$$' (noprec):   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'
  immediate action:   reduce id_level_expr --> 'LPAREN' arith_expr 'RPAREN'  gotos:state 103:  items:    number -> 'DOUBLE' . 
  actions:    action 'ERROR' (noprec):   reduce number --> 'DOUBLE'
    action 'KW_CONFIG' (noprec):   reduce number --> 'DOUBLE'
    action 'TRUE' (noprec):   reduce number --> 'DOUBLE'
    action 'FALSE' (noprec):   reduce number --> 'DOUBLE'
    action 'AND' (noprec):   reduce number --> 'DOUBLE'
    action 'OR' (noprec):   reduce number --> 'DOUBLE'
    action 'GE' (noprec):   reduce number --> 'DOUBLE'
    action 'LE' (noprec):   reduce number --> 'DOUBLE'
    action 'EQ' (noprec):   reduce number --> 'DOUBLE'
    action 'NEQ' (noprec):   reduce number --> 'DOUBLE'
    action 'LANGLE' (noprec):   reduce number --> 'DOUBLE'
    action 'RANGLE' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_SAMPLE' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_BREAK' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_IF' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_THEN' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_ELSE' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_ELSEIF' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_FI' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_PROB' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_SKIP' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_SCORE' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_RETURN' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_WHILE' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_DO' (noprec):   reduce number --> 'DOUBLE'
    action 'ST_OD' (noprec):   reduce number --> 'DOUBLE'
    action 'PLUS' (noprec):   reduce number --> 'DOUBLE'
    action 'MULTIPLY' (noprec):   reduce number --> 'DOUBLE'
    action 'MINUS' (noprec):   reduce number --> 'DOUBLE'
    action 'COMMA' (noprec):   reduce number --> 'DOUBLE'
    action 'ASSIGN' (noprec):   reduce number --> 'DOUBLE'
    action 'TILDE' (noprec):   reduce number --> 'DOUBLE'
    action 'HAT' (noprec):   reduce number --> 'DOUBLE'
    action 'LPAREN' (noprec):   reduce number --> 'DOUBLE'
    action 'RPAREN' (noprec):   reduce number --> 'DOUBLE'
    action 'LBKT' (noprec):   reduce number --> 'DOUBLE'
    action 'RBKT' (noprec):   reduce number --> 'DOUBLE'
    action 'VBAR' (noprec):   reduce number --> 'DOUBLE'
    action 'NEWLINE' (noprec):   reduce number --> 'DOUBLE'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce number --> 'DOUBLE'
    action 'EOF' (noprec):   reduce number --> 'DOUBLE'
    action 'SEMI_COLON' (noprec):   reduce number --> 'DOUBLE'
    action 'END' (noprec):   reduce number --> 'DOUBLE'
    action 'DOUBLE' (noprec):   reduce number --> 'DOUBLE'
    action 'INT' (noprec):   reduce number --> 'DOUBLE'
    action 'ID' (noprec):   reduce number --> 'DOUBLE'
    action 'error' (noprec):   reduce number --> 'DOUBLE'
    action '#' (noprec):   reduce number --> 'DOUBLE'
    action '$$' (noprec):   reduce number --> 'DOUBLE'
  immediate action:   reduce number --> 'DOUBLE'  gotos:state 104:  items:    number -> 'INT' . 
  actions:    action 'ERROR' (noprec):   reduce number --> 'INT'
    action 'KW_CONFIG' (noprec):   reduce number --> 'INT'
    action 'TRUE' (noprec):   reduce number --> 'INT'
    action 'FALSE' (noprec):   reduce number --> 'INT'
    action 'AND' (noprec):   reduce number --> 'INT'
    action 'OR' (noprec):   reduce number --> 'INT'
    action 'GE' (noprec):   reduce number --> 'INT'
    action 'LE' (noprec):   reduce number --> 'INT'
    action 'EQ' (noprec):   reduce number --> 'INT'
    action 'NEQ' (noprec):   reduce number --> 'INT'
    action 'LANGLE' (noprec):   reduce number --> 'INT'
    action 'RANGLE' (noprec):   reduce number --> 'INT'
    action 'ST_SAMPLE' (noprec):   reduce number --> 'INT'
    action 'ST_BREAK' (noprec):   reduce number --> 'INT'
    action 'ST_IF' (noprec):   reduce number --> 'INT'
    action 'ST_THEN' (noprec):   reduce number --> 'INT'
    action 'ST_ELSE' (noprec):   reduce number --> 'INT'
    action 'ST_ELSEIF' (noprec):   reduce number --> 'INT'
    action 'ST_FI' (noprec):   reduce number --> 'INT'
    action 'ST_PROB' (noprec):   reduce number --> 'INT'
    action 'ST_SKIP' (noprec):   reduce number --> 'INT'
    action 'ST_SCORE' (noprec):   reduce number --> 'INT'
    action 'ST_RETURN' (noprec):   reduce number --> 'INT'
    action 'ST_WHILE' (noprec):   reduce number --> 'INT'
    action 'ST_DO' (noprec):   reduce number --> 'INT'
    action 'ST_OD' (noprec):   reduce number --> 'INT'
    action 'PLUS' (noprec):   reduce number --> 'INT'
    action 'MULTIPLY' (noprec):   reduce number --> 'INT'
    action 'MINUS' (noprec):   reduce number --> 'INT'
    action 'COMMA' (noprec):   reduce number --> 'INT'
    action 'ASSIGN' (noprec):   reduce number --> 'INT'
    action 'TILDE' (noprec):   reduce number --> 'INT'
    action 'HAT' (noprec):   reduce number --> 'INT'
    action 'LPAREN' (noprec):   reduce number --> 'INT'
    action 'RPAREN' (noprec):   reduce number --> 'INT'
    action 'LBKT' (noprec):   reduce number --> 'INT'
    action 'RBKT' (noprec):   reduce number --> 'INT'
    action 'VBAR' (noprec):   reduce number --> 'INT'
    action 'NEWLINE' (noprec):   reduce number --> 'INT'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce number --> 'INT'
    action 'EOF' (noprec):   reduce number --> 'INT'
    action 'SEMI_COLON' (noprec):   reduce number --> 'INT'
    action 'END' (noprec):   reduce number --> 'INT'
    action 'DOUBLE' (noprec):   reduce number --> 'INT'
    action 'INT' (noprec):   reduce number --> 'INT'
    action 'ID' (noprec):   reduce number --> 'INT'
    action 'error' (noprec):   reduce number --> 'INT'
    action '#' (noprec):   reduce number --> 'INT'
    action '$$' (noprec):   reduce number --> 'INT'
  immediate action:   reduce number --> 'INT'  gotos:state 105:  items:    number -> 'MINUS' . 'DOUBLE'
    number -> 'MINUS' . 'INT'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 106
    action 'INT' (noprec):   shift 107
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 106:  items:    number -> 'MINUS' 'DOUBLE' . 
  actions:    action 'ERROR' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'KW_CONFIG' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'TRUE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'FALSE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'AND' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'OR' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'GE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'LE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'EQ' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'NEQ' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'LANGLE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'RANGLE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_SAMPLE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_BREAK' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_IF' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_THEN' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_ELSE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_ELSEIF' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_FI' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_PROB' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_SKIP' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_SCORE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_RETURN' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_WHILE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_DO' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ST_OD' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'PLUS' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'MULTIPLY' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'MINUS' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'COMMA' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ASSIGN' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'TILDE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'HAT' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'LPAREN' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'RPAREN' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'LBKT' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'RBKT' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'VBAR' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'NEWLINE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'EOF' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'SEMI_COLON' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'END' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'DOUBLE' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'INT' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'ID' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action 'error' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action '#' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
    action '$$' (noprec):   reduce number --> 'MINUS' 'DOUBLE'
  immediate action:   reduce number --> 'MINUS' 'DOUBLE'  gotos:state 107:  items:    number -> 'MINUS' 'INT' . 
  actions:    action 'ERROR' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'KW_CONFIG' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'TRUE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'FALSE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'AND' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'OR' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'GE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'LE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'EQ' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'NEQ' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'LANGLE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'RANGLE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_SAMPLE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_BREAK' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_IF' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_THEN' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_ELSE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_ELSEIF' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_FI' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_PROB' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_SKIP' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_SCORE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_RETURN' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_WHILE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_DO' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ST_OD' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'PLUS' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'MULTIPLY' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'MINUS' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'COMMA' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ASSIGN' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'TILDE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'HAT' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'LPAREN' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'RPAREN' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'LBKT' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'RBKT' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'VBAR' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'NEWLINE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'EOF' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'SEMI_COLON' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'END' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'DOUBLE' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'INT' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'ID' (noprec):   reduce number --> 'MINUS' 'INT'
    action 'error' (noprec):   reduce number --> 'MINUS' 'INT'
    action '#' (noprec):   reduce number --> 'MINUS' 'INT'
    action '$$' (noprec):   reduce number --> 'MINUS' 'INT'
  immediate action:   reduce number --> 'MINUS' 'INT'  gotos:state 108:  items:    bool_expr -> and_bool_expr . 
    and_bool_expr -> and_bool_expr . 'AND' bool_expr_element
  actions:    action 'ERROR' (noprec):   reduce bool_expr --> and_bool_expr
    action 'KW_CONFIG' (noprec):   reduce bool_expr --> and_bool_expr
    action 'TRUE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'FALSE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'AND' (noprec):   shift 109
    action 'OR' (noprec):   reduce bool_expr --> and_bool_expr
    action 'GE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'LE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'EQ' (noprec):   reduce bool_expr --> and_bool_expr
    action 'NEQ' (noprec):   reduce bool_expr --> and_bool_expr
    action 'LANGLE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'RANGLE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_SAMPLE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_BREAK' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_IF' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_THEN' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_ELSE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_ELSEIF' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_FI' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_PROB' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_SKIP' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_SCORE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_RETURN' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_WHILE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_DO' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ST_OD' (noprec):   reduce bool_expr --> and_bool_expr
    action 'PLUS' (noprec):   reduce bool_expr --> and_bool_expr
    action 'MULTIPLY' (noprec):   reduce bool_expr --> and_bool_expr
    action 'MINUS' (noprec):   reduce bool_expr --> and_bool_expr
    action 'COMMA' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ASSIGN' (noprec):   reduce bool_expr --> and_bool_expr
    action 'TILDE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'HAT' (noprec):   reduce bool_expr --> and_bool_expr
    action 'LPAREN' (noprec):   reduce bool_expr --> and_bool_expr
    action 'RPAREN' (noprec):   reduce bool_expr --> and_bool_expr
    action 'LBKT' (noprec):   reduce bool_expr --> and_bool_expr
    action 'RBKT' (noprec):   reduce bool_expr --> and_bool_expr
    action 'VBAR' (noprec):   reduce bool_expr --> and_bool_expr
    action 'NEWLINE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'END_BLOCK_COMMENTING' (noprec):   reduce bool_expr --> and_bool_expr
    action 'EOF' (noprec):   reduce bool_expr --> and_bool_expr
    action 'SEMI_COLON' (noprec):   reduce bool_expr --> and_bool_expr
    action 'END' (noprec):   reduce bool_expr --> and_bool_expr
    action 'DOUBLE' (noprec):   reduce bool_expr --> and_bool_expr
    action 'INT' (noprec):   reduce bool_expr --> and_bool_expr
    action 'ID' (noprec):   reduce bool_expr --> and_bool_expr
    action 'error' (noprec):   reduce bool_expr --> and_bool_expr
    action '#' (noprec):   reduce bool_expr --> and_bool_expr
    action '$$' (noprec):   reduce bool_expr --> and_bool_expr
  immediate action: <none>  gotos:state 109:  items:    and_bool_expr -> and_bool_expr 'AND' . bool_expr_element
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   shift 116
    action 'FALSE' (noprec):   shift 117
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 99
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 112
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
    goto bool_expr_element: 110
    goto bool_expr_constant: 115
state 110:  items:    and_bool_expr -> and_bool_expr 'AND' bool_expr_element . 
  actions:    action 'ERROR' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'KW_CONFIG' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'TRUE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'FALSE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'AND' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'OR' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'GE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'LE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'EQ' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'NEQ' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'LANGLE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'RANGLE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_SAMPLE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_BREAK' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_IF' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_THEN' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_ELSE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_ELSEIF' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_FI' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_PROB' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_SKIP' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_SCORE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_RETURN' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_WHILE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_DO' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ST_OD' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'PLUS' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'MULTIPLY' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'MINUS' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'COMMA' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ASSIGN' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'TILDE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'HAT' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'LPAREN' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'RPAREN' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'LBKT' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'RBKT' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'VBAR' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'NEWLINE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'END_BLOCK_COMMENTING' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'EOF' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'SEMI_COLON' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'END' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'DOUBLE' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'INT' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'ID' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action 'error' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action '#' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
    action '$$' (noprec):   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element
  immediate action:   reduce and_bool_expr --> and_bool_expr 'AND' bool_expr_element  gotos:state 111:  items:    and_bool_expr -> bool_expr_element . 
  actions:    action 'ERROR' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'KW_CONFIG' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'TRUE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'FALSE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'AND' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'OR' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'GE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'LE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'EQ' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'NEQ' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'LANGLE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'RANGLE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_SAMPLE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_BREAK' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_IF' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_THEN' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_ELSE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_ELSEIF' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_FI' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_PROB' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_SKIP' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_SCORE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_RETURN' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_WHILE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_DO' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ST_OD' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'PLUS' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'MULTIPLY' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'MINUS' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'COMMA' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ASSIGN' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'TILDE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'HAT' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'LPAREN' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'RPAREN' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'LBKT' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'RBKT' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'VBAR' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'NEWLINE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'END_BLOCK_COMMENTING' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'EOF' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'SEMI_COLON' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'END' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'DOUBLE' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'INT' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'ID' (noprec):   reduce and_bool_expr --> bool_expr_element
    action 'error' (noprec):   reduce and_bool_expr --> bool_expr_element
    action '#' (noprec):   reduce and_bool_expr --> bool_expr_element
    action '$$' (noprec):   reduce and_bool_expr --> bool_expr_element
  immediate action:   reduce and_bool_expr --> bool_expr_element  gotos:state 112:  items:    bool_expr_element -> arith_expr . cmp_op arith_expr
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   shift 121
    action 'LE' (noprec):   shift 120
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   shift 122
    action 'RANGLE' (noprec):   shift 123
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto cmp_op: 113
state 113:  items:    bool_expr_element -> arith_expr cmp_op . arith_expr
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   shift 98
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   shift 96
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto arith_expr: 114
    goto mul_level_expr: 88
    goto id_level_expr: 93
    goto number: 97
state 114:  items:    bool_expr_element -> arith_expr cmp_op arith_expr . 
  actions:    action 'ERROR' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'KW_CONFIG' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'TRUE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'FALSE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'AND' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'OR' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'GE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'LE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'EQ' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'NEQ' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'LANGLE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'RANGLE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_SAMPLE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_BREAK' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_IF' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_THEN' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_ELSE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_ELSEIF' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_FI' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_PROB' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_SKIP' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_SCORE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_RETURN' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_WHILE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_DO' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ST_OD' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'PLUS' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'MULTIPLY' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'MINUS' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'COMMA' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ASSIGN' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'TILDE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'HAT' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'LPAREN' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'RPAREN' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'LBKT' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'RBKT' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'VBAR' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'NEWLINE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'END_BLOCK_COMMENTING' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'EOF' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'SEMI_COLON' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'END' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'DOUBLE' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'INT' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'ID' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action 'error' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action '#' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
    action '$$' (noprec):   reduce bool_expr_element --> arith_expr cmp_op arith_expr
  immediate action:   reduce bool_expr_element --> arith_expr cmp_op arith_expr  gotos:state 115:  items:    bool_expr_element -> bool_expr_constant . 
  actions:    action 'ERROR' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'KW_CONFIG' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'TRUE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'FALSE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'AND' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'OR' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'GE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'LE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'EQ' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'NEQ' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'LANGLE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'RANGLE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_SAMPLE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_BREAK' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_IF' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_THEN' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_ELSE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_ELSEIF' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_FI' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_PROB' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_SKIP' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_SCORE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_RETURN' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_WHILE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_DO' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ST_OD' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'PLUS' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'MULTIPLY' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'MINUS' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'COMMA' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ASSIGN' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'TILDE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'HAT' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'LPAREN' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'RPAREN' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'LBKT' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'RBKT' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'VBAR' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'NEWLINE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'END_BLOCK_COMMENTING' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'EOF' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'SEMI_COLON' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'END' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'DOUBLE' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'INT' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'ID' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action 'error' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action '#' (noprec):   reduce bool_expr_element --> bool_expr_constant
    action '$$' (noprec):   reduce bool_expr_element --> bool_expr_constant
  immediate action:   reduce bool_expr_element --> bool_expr_constant  gotos:state 116:  items:    bool_expr_constant -> 'TRUE' . 
  actions:    action 'ERROR' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'KW_CONFIG' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'TRUE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'FALSE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'AND' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'OR' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'GE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'LE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'EQ' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'NEQ' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'LANGLE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'RANGLE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_SAMPLE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_BREAK' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_IF' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_THEN' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_ELSE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_ELSEIF' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_FI' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_PROB' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_SKIP' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_SCORE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_RETURN' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_WHILE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_DO' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ST_OD' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'PLUS' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'MULTIPLY' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'MINUS' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'COMMA' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ASSIGN' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'TILDE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'HAT' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'LPAREN' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'RPAREN' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'LBKT' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'RBKT' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'VBAR' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'NEWLINE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'EOF' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'SEMI_COLON' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'END' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'DOUBLE' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'INT' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'ID' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action 'error' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action '#' (noprec):   reduce bool_expr_constant --> 'TRUE'
    action '$$' (noprec):   reduce bool_expr_constant --> 'TRUE'
  immediate action:   reduce bool_expr_constant --> 'TRUE'  gotos:state 117:  items:    bool_expr_constant -> 'FALSE' . 
  actions:    action 'ERROR' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'KW_CONFIG' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'TRUE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'FALSE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'AND' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'OR' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'GE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'LE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'EQ' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'NEQ' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'LANGLE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'RANGLE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_SAMPLE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_BREAK' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_IF' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_THEN' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_ELSE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_ELSEIF' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_FI' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_PROB' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_SKIP' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_SCORE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_RETURN' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_WHILE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_DO' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ST_OD' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'PLUS' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'MULTIPLY' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'MINUS' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'COMMA' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ASSIGN' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'TILDE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'HAT' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'LPAREN' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'RPAREN' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'LBKT' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'RBKT' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'VBAR' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'NEWLINE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'EOF' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'SEMI_COLON' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'END' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'DOUBLE' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'INT' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'ID' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action 'error' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action '#' (noprec):   reduce bool_expr_constant --> 'FALSE'
    action '$$' (noprec):   reduce bool_expr_constant --> 'FALSE'
  immediate action:   reduce bool_expr_constant --> 'FALSE'  gotos:state 118:  items:    bool_expr_constant -> 'LPAREN' bool_expr . 'RPAREN'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   shift 119
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 119:  items:    bool_expr_constant -> 'LPAREN' bool_expr 'RPAREN' . 
  actions:    action 'ERROR' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'KW_CONFIG' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'TRUE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'FALSE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'AND' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'OR' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'GE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'LE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'EQ' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'NEQ' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'LANGLE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'RANGLE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_SAMPLE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_BREAK' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_IF' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_THEN' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_ELSE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_ELSEIF' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_FI' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_PROB' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_SKIP' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_SCORE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_RETURN' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_WHILE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_DO' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ST_OD' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'PLUS' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'MULTIPLY' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'MINUS' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'COMMA' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ASSIGN' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'TILDE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'HAT' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'LPAREN' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'RPAREN' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'LBKT' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'RBKT' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'VBAR' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'NEWLINE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'EOF' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'SEMI_COLON' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'END' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'DOUBLE' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'INT' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'ID' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action 'error' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action '#' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
    action '$$' (noprec):   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'
  immediate action:   reduce bool_expr_constant --> 'LPAREN' bool_expr 'RPAREN'  gotos:state 120:  items:    cmp_op -> 'LE' . 
  actions:    action 'ERROR' (noprec):   reduce cmp_op --> 'LE'
    action 'KW_CONFIG' (noprec):   reduce cmp_op --> 'LE'
    action 'TRUE' (noprec):   reduce cmp_op --> 'LE'
    action 'FALSE' (noprec):   reduce cmp_op --> 'LE'
    action 'AND' (noprec):   reduce cmp_op --> 'LE'
    action 'OR' (noprec):   reduce cmp_op --> 'LE'
    action 'GE' (noprec):   reduce cmp_op --> 'LE'
    action 'LE' (noprec):   reduce cmp_op --> 'LE'
    action 'EQ' (noprec):   reduce cmp_op --> 'LE'
    action 'NEQ' (noprec):   reduce cmp_op --> 'LE'
    action 'LANGLE' (noprec):   reduce cmp_op --> 'LE'
    action 'RANGLE' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_SAMPLE' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_BREAK' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_IF' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_THEN' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_ELSE' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_ELSEIF' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_FI' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_PROB' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_SKIP' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_SCORE' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_RETURN' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_WHILE' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_DO' (noprec):   reduce cmp_op --> 'LE'
    action 'ST_OD' (noprec):   reduce cmp_op --> 'LE'
    action 'PLUS' (noprec):   reduce cmp_op --> 'LE'
    action 'MULTIPLY' (noprec):   reduce cmp_op --> 'LE'
    action 'MINUS' (noprec):   reduce cmp_op --> 'LE'
    action 'COMMA' (noprec):   reduce cmp_op --> 'LE'
    action 'ASSIGN' (noprec):   reduce cmp_op --> 'LE'
    action 'TILDE' (noprec):   reduce cmp_op --> 'LE'
    action 'HAT' (noprec):   reduce cmp_op --> 'LE'
    action 'LPAREN' (noprec):   reduce cmp_op --> 'LE'
    action 'RPAREN' (noprec):   reduce cmp_op --> 'LE'
    action 'LBKT' (noprec):   reduce cmp_op --> 'LE'
    action 'RBKT' (noprec):   reduce cmp_op --> 'LE'
    action 'VBAR' (noprec):   reduce cmp_op --> 'LE'
    action 'NEWLINE' (noprec):   reduce cmp_op --> 'LE'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce cmp_op --> 'LE'
    action 'EOF' (noprec):   reduce cmp_op --> 'LE'
    action 'SEMI_COLON' (noprec):   reduce cmp_op --> 'LE'
    action 'END' (noprec):   reduce cmp_op --> 'LE'
    action 'DOUBLE' (noprec):   reduce cmp_op --> 'LE'
    action 'INT' (noprec):   reduce cmp_op --> 'LE'
    action 'ID' (noprec):   reduce cmp_op --> 'LE'
    action 'error' (noprec):   reduce cmp_op --> 'LE'
    action '#' (noprec):   reduce cmp_op --> 'LE'
    action '$$' (noprec):   reduce cmp_op --> 'LE'
  immediate action:   reduce cmp_op --> 'LE'  gotos:state 121:  items:    cmp_op -> 'GE' . 
  actions:    action 'ERROR' (noprec):   reduce cmp_op --> 'GE'
    action 'KW_CONFIG' (noprec):   reduce cmp_op --> 'GE'
    action 'TRUE' (noprec):   reduce cmp_op --> 'GE'
    action 'FALSE' (noprec):   reduce cmp_op --> 'GE'
    action 'AND' (noprec):   reduce cmp_op --> 'GE'
    action 'OR' (noprec):   reduce cmp_op --> 'GE'
    action 'GE' (noprec):   reduce cmp_op --> 'GE'
    action 'LE' (noprec):   reduce cmp_op --> 'GE'
    action 'EQ' (noprec):   reduce cmp_op --> 'GE'
    action 'NEQ' (noprec):   reduce cmp_op --> 'GE'
    action 'LANGLE' (noprec):   reduce cmp_op --> 'GE'
    action 'RANGLE' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_SAMPLE' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_BREAK' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_IF' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_THEN' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_ELSE' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_ELSEIF' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_FI' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_PROB' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_SKIP' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_SCORE' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_RETURN' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_WHILE' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_DO' (noprec):   reduce cmp_op --> 'GE'
    action 'ST_OD' (noprec):   reduce cmp_op --> 'GE'
    action 'PLUS' (noprec):   reduce cmp_op --> 'GE'
    action 'MULTIPLY' (noprec):   reduce cmp_op --> 'GE'
    action 'MINUS' (noprec):   reduce cmp_op --> 'GE'
    action 'COMMA' (noprec):   reduce cmp_op --> 'GE'
    action 'ASSIGN' (noprec):   reduce cmp_op --> 'GE'
    action 'TILDE' (noprec):   reduce cmp_op --> 'GE'
    action 'HAT' (noprec):   reduce cmp_op --> 'GE'
    action 'LPAREN' (noprec):   reduce cmp_op --> 'GE'
    action 'RPAREN' (noprec):   reduce cmp_op --> 'GE'
    action 'LBKT' (noprec):   reduce cmp_op --> 'GE'
    action 'RBKT' (noprec):   reduce cmp_op --> 'GE'
    action 'VBAR' (noprec):   reduce cmp_op --> 'GE'
    action 'NEWLINE' (noprec):   reduce cmp_op --> 'GE'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce cmp_op --> 'GE'
    action 'EOF' (noprec):   reduce cmp_op --> 'GE'
    action 'SEMI_COLON' (noprec):   reduce cmp_op --> 'GE'
    action 'END' (noprec):   reduce cmp_op --> 'GE'
    action 'DOUBLE' (noprec):   reduce cmp_op --> 'GE'
    action 'INT' (noprec):   reduce cmp_op --> 'GE'
    action 'ID' (noprec):   reduce cmp_op --> 'GE'
    action 'error' (noprec):   reduce cmp_op --> 'GE'
    action '#' (noprec):   reduce cmp_op --> 'GE'
    action '$$' (noprec):   reduce cmp_op --> 'GE'
  immediate action:   reduce cmp_op --> 'GE'  gotos:state 122:  items:    cmp_op -> 'LANGLE' . 
  actions:    action 'ERROR' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'KW_CONFIG' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'TRUE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'FALSE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'AND' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'OR' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'GE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'LE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'EQ' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'NEQ' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'LANGLE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'RANGLE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_SAMPLE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_BREAK' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_IF' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_THEN' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_ELSE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_ELSEIF' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_FI' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_PROB' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_SKIP' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_SCORE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_RETURN' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_WHILE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_DO' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ST_OD' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'PLUS' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'MULTIPLY' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'MINUS' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'COMMA' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ASSIGN' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'TILDE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'HAT' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'LPAREN' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'RPAREN' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'LBKT' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'RBKT' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'VBAR' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'NEWLINE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'EOF' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'SEMI_COLON' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'END' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'DOUBLE' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'INT' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'ID' (noprec):   reduce cmp_op --> 'LANGLE'
    action 'error' (noprec):   reduce cmp_op --> 'LANGLE'
    action '#' (noprec):   reduce cmp_op --> 'LANGLE'
    action '$$' (noprec):   reduce cmp_op --> 'LANGLE'
  immediate action:   reduce cmp_op --> 'LANGLE'  gotos:state 123:  items:    cmp_op -> 'RANGLE' . 
  actions:    action 'ERROR' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'KW_CONFIG' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'TRUE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'FALSE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'AND' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'OR' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'GE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'LE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'EQ' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'NEQ' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'LANGLE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'RANGLE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_SAMPLE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_BREAK' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_IF' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_THEN' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_ELSE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_ELSEIF' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_FI' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_PROB' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_SKIP' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_SCORE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_RETURN' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_WHILE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_DO' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ST_OD' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'PLUS' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'MULTIPLY' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'MINUS' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'COMMA' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ASSIGN' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'TILDE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'HAT' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'LPAREN' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'RPAREN' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'LBKT' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'RBKT' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'VBAR' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'NEWLINE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'EOF' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'SEMI_COLON' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'END' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'DOUBLE' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'INT' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'ID' (noprec):   reduce cmp_op --> 'RANGLE'
    action 'error' (noprec):   reduce cmp_op --> 'RANGLE'
    action '#' (noprec):   reduce cmp_op --> 'RANGLE'
    action '$$' (noprec):   reduce cmp_op --> 'RANGLE'
  immediate action:   reduce cmp_op --> 'RANGLE'  gotos:state 124:  items:    randvars -> rv_decl_list . 
  actions:    action 'ERROR' (noprec):   reduce randvars --> rv_decl_list
    action 'KW_CONFIG' (noprec):   reduce randvars --> rv_decl_list
    action 'TRUE' (noprec):   reduce randvars --> rv_decl_list
    action 'FALSE' (noprec):   reduce randvars --> rv_decl_list
    action 'AND' (noprec):   reduce randvars --> rv_decl_list
    action 'OR' (noprec):   reduce randvars --> rv_decl_list
    action 'GE' (noprec):   reduce randvars --> rv_decl_list
    action 'LE' (noprec):   reduce randvars --> rv_decl_list
    action 'EQ' (noprec):   reduce randvars --> rv_decl_list
    action 'NEQ' (noprec):   reduce randvars --> rv_decl_list
    action 'LANGLE' (noprec):   reduce randvars --> rv_decl_list
    action 'RANGLE' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_SAMPLE' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_BREAK' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_IF' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_THEN' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_ELSE' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_ELSEIF' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_FI' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_PROB' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_SKIP' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_SCORE' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_RETURN' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_WHILE' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_DO' (noprec):   reduce randvars --> rv_decl_list
    action 'ST_OD' (noprec):   reduce randvars --> rv_decl_list
    action 'PLUS' (noprec):   reduce randvars --> rv_decl_list
    action 'MULTIPLY' (noprec):   reduce randvars --> rv_decl_list
    action 'MINUS' (noprec):   reduce randvars --> rv_decl_list
    action 'COMMA' (noprec):   reduce randvars --> rv_decl_list
    action 'ASSIGN' (noprec):   reduce randvars --> rv_decl_list
    action 'TILDE' (noprec):   reduce randvars --> rv_decl_list
    action 'HAT' (noprec):   reduce randvars --> rv_decl_list
    action 'LPAREN' (noprec):   reduce randvars --> rv_decl_list
    action 'RPAREN' (noprec):   reduce randvars --> rv_decl_list
    action 'LBKT' (noprec):   reduce randvars --> rv_decl_list
    action 'RBKT' (noprec):   reduce randvars --> rv_decl_list
    action 'VBAR' (noprec):   reduce randvars --> rv_decl_list
    action 'NEWLINE' (noprec):   reduce randvars --> rv_decl_list
    action 'END_BLOCK_COMMENTING' (noprec):   reduce randvars --> rv_decl_list
    action 'EOF' (noprec):   reduce randvars --> rv_decl_list
    action 'SEMI_COLON' (noprec):   reduce randvars --> rv_decl_list
    action 'END' (noprec):   reduce randvars --> rv_decl_list
    action 'DOUBLE' (noprec):   reduce randvars --> rv_decl_list
    action 'INT' (noprec):   reduce randvars --> rv_decl_list
    action 'ID' (noprec):   reduce randvars --> rv_decl_list
    action 'error' (noprec):   reduce randvars --> rv_decl_list
    action '#' (noprec):   reduce randvars --> rv_decl_list
    action '$$' (noprec):   reduce randvars --> rv_decl_list
  immediate action:   reduce randvars --> rv_decl_list  gotos:state 125:  items:    rv_decl_list -> 'ID' . 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   shift 126
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 126:  items:    rv_decl_list -> 'ID' 'TILDE' . 'ST_SAMPLE' distribution rv_decl_list
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   shift 127
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 127:  items:    rv_decl_list -> 'ID' 'TILDE' 'ST_SAMPLE' . distribution rv_decl_list
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   error
    action 'ID' (noprec):   shift 43
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto distribution: 128
state 128:  items:    rv_decl_list -> 'ID' 'TILDE' 'ST_SAMPLE' distribution . rv_decl_list
  actions:    action 'ERROR' (noprec):   reduce rv_decl_list --> 
    action 'KW_CONFIG' (noprec):   reduce rv_decl_list --> 
    action 'TRUE' (noprec):   reduce rv_decl_list --> 
    action 'FALSE' (noprec):   reduce rv_decl_list --> 
    action 'AND' (noprec):   reduce rv_decl_list --> 
    action 'OR' (noprec):   reduce rv_decl_list --> 
    action 'GE' (noprec):   reduce rv_decl_list --> 
    action 'LE' (noprec):   reduce rv_decl_list --> 
    action 'EQ' (noprec):   reduce rv_decl_list --> 
    action 'NEQ' (noprec):   reduce rv_decl_list --> 
    action 'LANGLE' (noprec):   reduce rv_decl_list --> 
    action 'RANGLE' (noprec):   reduce rv_decl_list --> 
    action 'ST_SAMPLE' (noprec):   reduce rv_decl_list --> 
    action 'ST_BREAK' (noprec):   reduce rv_decl_list --> 
    action 'ST_IF' (noprec):   reduce rv_decl_list --> 
    action 'ST_THEN' (noprec):   reduce rv_decl_list --> 
    action 'ST_ELSE' (noprec):   reduce rv_decl_list --> 
    action 'ST_ELSEIF' (noprec):   reduce rv_decl_list --> 
    action 'ST_FI' (noprec):   reduce rv_decl_list --> 
    action 'ST_PROB' (noprec):   reduce rv_decl_list --> 
    action 'ST_SKIP' (noprec):   reduce rv_decl_list --> 
    action 'ST_SCORE' (noprec):   reduce rv_decl_list --> 
    action 'ST_RETURN' (noprec):   reduce rv_decl_list --> 
    action 'ST_WHILE' (noprec):   reduce rv_decl_list --> 
    action 'ST_DO' (noprec):   reduce rv_decl_list --> 
    action 'ST_OD' (noprec):   reduce rv_decl_list --> 
    action 'PLUS' (noprec):   reduce rv_decl_list --> 
    action 'MULTIPLY' (noprec):   reduce rv_decl_list --> 
    action 'MINUS' (noprec):   reduce rv_decl_list --> 
    action 'COMMA' (noprec):   reduce rv_decl_list --> 
    action 'ASSIGN' (noprec):   reduce rv_decl_list --> 
    action 'TILDE' (noprec):   reduce rv_decl_list --> 
    action 'HAT' (noprec):   reduce rv_decl_list --> 
    action 'LPAREN' (noprec):   reduce rv_decl_list --> 
    action 'RPAREN' (noprec):   reduce rv_decl_list --> 
    action 'LBKT' (noprec):   reduce rv_decl_list --> 
    action 'RBKT' (noprec):   reduce rv_decl_list --> 
    action 'VBAR' (noprec):   reduce rv_decl_list --> 
    action 'NEWLINE' (noprec):   reduce rv_decl_list --> 
    action 'END_BLOCK_COMMENTING' (noprec):   reduce rv_decl_list --> 
    action 'EOF' (noprec):   reduce rv_decl_list --> 
    action 'SEMI_COLON' (noprec):   reduce rv_decl_list --> 
    action 'END' (noprec):   reduce rv_decl_list --> 
    action 'DOUBLE' (noprec):   reduce rv_decl_list --> 
    action 'INT' (noprec):   reduce rv_decl_list --> 
    action 'ID' (noprec):   shift 125
    action 'error' (noprec):   reduce rv_decl_list --> 
    action '#' (noprec):   reduce rv_decl_list --> 
    action '$$' (noprec):   reduce rv_decl_list --> 
  immediate action: <none>  gotos:    goto rv_decl_list: 129
state 129:  items:    rv_decl_list -> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list . 
  actions:    action 'ERROR' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'KW_CONFIG' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'TRUE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'FALSE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'AND' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'OR' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'GE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'LE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'EQ' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'NEQ' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'LANGLE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'RANGLE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_SAMPLE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_BREAK' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_IF' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_THEN' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_ELSE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_ELSEIF' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_FI' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_PROB' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_SKIP' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_SCORE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_RETURN' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_WHILE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_DO' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ST_OD' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'PLUS' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'MULTIPLY' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'MINUS' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'COMMA' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ASSIGN' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'TILDE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'HAT' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'LPAREN' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'RPAREN' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'LBKT' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'RBKT' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'VBAR' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'NEWLINE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'END_BLOCK_COMMENTING' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'EOF' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'SEMI_COLON' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'END' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'DOUBLE' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'INT' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'ID' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action 'error' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action '#' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
    action '$$' (noprec):   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list
  immediate action:   reduce rv_decl_list --> 'ID' 'TILDE' 'ST_SAMPLE' distribution rv_decl_list  gotos:state 130:  items:    dist_arg -> number . 
    dist_arg -> number . 'HAT' 'INT'
  actions:    action 'ERROR' (noprec):   reduce dist_arg --> number
    action 'KW_CONFIG' (noprec):   reduce dist_arg --> number
    action 'TRUE' (noprec):   reduce dist_arg --> number
    action 'FALSE' (noprec):   reduce dist_arg --> number
    action 'AND' (noprec):   reduce dist_arg --> number
    action 'OR' (noprec):   reduce dist_arg --> number
    action 'GE' (noprec):   reduce dist_arg --> number
    action 'LE' (noprec):   reduce dist_arg --> number
    action 'EQ' (noprec):   reduce dist_arg --> number
    action 'NEQ' (noprec):   reduce dist_arg --> number
    action 'LANGLE' (noprec):   reduce dist_arg --> number
    action 'RANGLE' (noprec):   reduce dist_arg --> number
    action 'ST_SAMPLE' (noprec):   reduce dist_arg --> number
    action 'ST_BREAK' (noprec):   reduce dist_arg --> number
    action 'ST_IF' (noprec):   reduce dist_arg --> number
    action 'ST_THEN' (noprec):   reduce dist_arg --> number
    action 'ST_ELSE' (noprec):   reduce dist_arg --> number
    action 'ST_ELSEIF' (noprec):   reduce dist_arg --> number
    action 'ST_FI' (noprec):   reduce dist_arg --> number
    action 'ST_PROB' (noprec):   reduce dist_arg --> number
    action 'ST_SKIP' (noprec):   reduce dist_arg --> number
    action 'ST_SCORE' (noprec):   reduce dist_arg --> number
    action 'ST_RETURN' (noprec):   reduce dist_arg --> number
    action 'ST_WHILE' (noprec):   reduce dist_arg --> number
    action 'ST_DO' (noprec):   reduce dist_arg --> number
    action 'ST_OD' (noprec):   reduce dist_arg --> number
    action 'PLUS' (noprec):   reduce dist_arg --> number
    action 'MULTIPLY' (noprec):   reduce dist_arg --> number
    action 'MINUS' (noprec):   reduce dist_arg --> number
    action 'COMMA' (noprec):   reduce dist_arg --> number
    action 'ASSIGN' (noprec):   reduce dist_arg --> number
    action 'TILDE' (noprec):   reduce dist_arg --> number
    action 'HAT' (noprec):   shift 131
    action 'LPAREN' (noprec):   reduce dist_arg --> number
    action 'RPAREN' (noprec):   reduce dist_arg --> number
    action 'LBKT' (noprec):   reduce dist_arg --> number
    action 'RBKT' (noprec):   reduce dist_arg --> number
    action 'VBAR' (noprec):   reduce dist_arg --> number
    action 'NEWLINE' (noprec):   reduce dist_arg --> number
    action 'END_BLOCK_COMMENTING' (noprec):   reduce dist_arg --> number
    action 'EOF' (noprec):   reduce dist_arg --> number
    action 'SEMI_COLON' (noprec):   reduce dist_arg --> number
    action 'END' (noprec):   reduce dist_arg --> number
    action 'DOUBLE' (noprec):   reduce dist_arg --> number
    action 'INT' (noprec):   reduce dist_arg --> number
    action 'ID' (noprec):   reduce dist_arg --> number
    action 'error' (noprec):   reduce dist_arg --> number
    action '#' (noprec):   reduce dist_arg --> number
    action '$$' (noprec):   reduce dist_arg --> number
  immediate action: <none>  gotos:state 131:  items:    dist_arg -> number 'HAT' . 'INT'
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   error
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   error
    action 'INT' (noprec):   shift 132
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:state 132:  items:    dist_arg -> number 'HAT' 'INT' . 
  actions:    action 'ERROR' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'KW_CONFIG' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'TRUE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'FALSE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'AND' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'OR' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'GE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'LE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'EQ' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'NEQ' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'LANGLE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'RANGLE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_SAMPLE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_BREAK' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_IF' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_THEN' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_ELSE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_ELSEIF' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_FI' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_PROB' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_SKIP' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_SCORE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_RETURN' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_WHILE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_DO' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ST_OD' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'PLUS' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'MULTIPLY' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'MINUS' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'COMMA' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ASSIGN' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'TILDE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'HAT' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'LPAREN' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'RPAREN' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'LBKT' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'RBKT' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'VBAR' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'NEWLINE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'END_BLOCK_COMMENTING' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'EOF' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'SEMI_COLON' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'END' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'DOUBLE' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'INT' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'ID' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action 'error' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action '#' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
    action '$$' (noprec):   reduce dist_arg --> number 'HAT' 'INT'
  immediate action:   reduce dist_arg --> number 'HAT' 'INT'  gotos:state 133:  items:    dist_arg_list -> dist_arg . 
    dist_arg_list -> dist_arg . 'COMMA' dist_arg_list
  actions:    action 'ERROR' (noprec):   reduce dist_arg_list --> dist_arg
    action 'KW_CONFIG' (noprec):   reduce dist_arg_list --> dist_arg
    action 'TRUE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'FALSE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'AND' (noprec):   reduce dist_arg_list --> dist_arg
    action 'OR' (noprec):   reduce dist_arg_list --> dist_arg
    action 'GE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'LE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'EQ' (noprec):   reduce dist_arg_list --> dist_arg
    action 'NEQ' (noprec):   reduce dist_arg_list --> dist_arg
    action 'LANGLE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'RANGLE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_SAMPLE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_BREAK' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_IF' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_THEN' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_ELSE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_ELSEIF' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_FI' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_PROB' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_SKIP' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_SCORE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_RETURN' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_WHILE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_DO' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ST_OD' (noprec):   reduce dist_arg_list --> dist_arg
    action 'PLUS' (noprec):   reduce dist_arg_list --> dist_arg
    action 'MULTIPLY' (noprec):   reduce dist_arg_list --> dist_arg
    action 'MINUS' (noprec):   reduce dist_arg_list --> dist_arg
    action 'COMMA' (noprec):   shift 134
    action 'ASSIGN' (noprec):   reduce dist_arg_list --> dist_arg
    action 'TILDE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'HAT' (noprec):   reduce dist_arg_list --> dist_arg
    action 'LPAREN' (noprec):   reduce dist_arg_list --> dist_arg
    action 'RPAREN' (noprec):   reduce dist_arg_list --> dist_arg
    action 'LBKT' (noprec):   reduce dist_arg_list --> dist_arg
    action 'RBKT' (noprec):   reduce dist_arg_list --> dist_arg
    action 'VBAR' (noprec):   reduce dist_arg_list --> dist_arg
    action 'NEWLINE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'END_BLOCK_COMMENTING' (noprec):   reduce dist_arg_list --> dist_arg
    action 'EOF' (noprec):   reduce dist_arg_list --> dist_arg
    action 'SEMI_COLON' (noprec):   reduce dist_arg_list --> dist_arg
    action 'END' (noprec):   reduce dist_arg_list --> dist_arg
    action 'DOUBLE' (noprec):   reduce dist_arg_list --> dist_arg
    action 'INT' (noprec):   reduce dist_arg_list --> dist_arg
    action 'ID' (noprec):   reduce dist_arg_list --> dist_arg
    action 'error' (noprec):   reduce dist_arg_list --> dist_arg
    action '#' (noprec):   reduce dist_arg_list --> dist_arg
    action '$$' (noprec):   reduce dist_arg_list --> dist_arg
  immediate action: <none>  gotos:state 134:  items:    dist_arg_list -> dist_arg 'COMMA' . dist_arg_list
  actions:    action 'ERROR' (noprec):   error
    action 'KW_CONFIG' (noprec):   error
    action 'TRUE' (noprec):   error
    action 'FALSE' (noprec):   error
    action 'AND' (noprec):   error
    action 'OR' (noprec):   error
    action 'GE' (noprec):   error
    action 'LE' (noprec):   error
    action 'EQ' (noprec):   error
    action 'NEQ' (noprec):   error
    action 'LANGLE' (noprec):   error
    action 'RANGLE' (noprec):   error
    action 'ST_SAMPLE' (noprec):   error
    action 'ST_BREAK' (noprec):   error
    action 'ST_IF' (noprec):   error
    action 'ST_THEN' (noprec):   error
    action 'ST_ELSE' (noprec):   error
    action 'ST_ELSEIF' (noprec):   error
    action 'ST_FI' (noprec):   error
    action 'ST_PROB' (noprec):   error
    action 'ST_SKIP' (noprec):   error
    action 'ST_SCORE' (noprec):   error
    action 'ST_RETURN' (noprec):   error
    action 'ST_WHILE' (noprec):   error
    action 'ST_DO' (noprec):   error
    action 'ST_OD' (noprec):   error
    action 'PLUS' (noprec):   error
    action 'MULTIPLY' (noprec):   error
    action 'MINUS' (noprec):   shift 105
    action 'COMMA' (noprec):   error
    action 'ASSIGN' (noprec):   error
    action 'TILDE' (noprec):   error
    action 'HAT' (noprec):   error
    action 'LPAREN' (noprec):   error
    action 'RPAREN' (noprec):   error
    action 'LBKT' (noprec):   error
    action 'RBKT' (noprec):   error
    action 'VBAR' (noprec):   error
    action 'NEWLINE' (noprec):   error
    action 'END_BLOCK_COMMENTING' (noprec):   error
    action 'EOF' (noprec):   error
    action 'SEMI_COLON' (noprec):   error
    action 'END' (noprec):   error
    action 'DOUBLE' (noprec):   shift 103
    action 'INT' (noprec):   shift 104
    action 'ID' (noprec):   error
    action 'error' (noprec):   error
    action '#' (noprec):   error
    action '$$' (noprec):   error
  immediate action: <none>  gotos:    goto number: 130
    goto dist_arg: 133
    goto dist_arg_list: 135
state 135:  items:    dist_arg_list -> dist_arg 'COMMA' dist_arg_list . 
  actions:    action 'ERROR' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'KW_CONFIG' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'TRUE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'FALSE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'AND' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'OR' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'GE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'LE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'EQ' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'NEQ' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'LANGLE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'RANGLE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_SAMPLE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_BREAK' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_IF' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_THEN' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_ELSE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_ELSEIF' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_FI' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_PROB' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_SKIP' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_SCORE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_RETURN' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_WHILE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_DO' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ST_OD' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'PLUS' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'MULTIPLY' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'MINUS' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'COMMA' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ASSIGN' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'TILDE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'HAT' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'LPAREN' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'RPAREN' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'LBKT' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'RBKT' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'VBAR' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'NEWLINE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'END_BLOCK_COMMENTING' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'EOF' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'SEMI_COLON' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'END' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'DOUBLE' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'INT' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'ID' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action 'error' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action '#' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
    action '$$' (noprec):   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list
  immediate action:   reduce dist_arg_list --> dist_arg 'COMMA' dist_arg_list  gotos:
startStates = 0;2
------------------------
        Output file describing compiled parser placed in Parser.fs and Parser.fsi
