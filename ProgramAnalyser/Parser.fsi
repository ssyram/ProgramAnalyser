// Signature file for parser generated by fsyacc
module Parser
type token = 
  | ERROR
  | KW_CONFIG
  | TRUE
  | FALSE
  | AND
  | OR
  | GE
  | LE
  | EQ
  | NEQ
  | LANGLE
  | RANGLE
  | ST_SAMPLE
  | ST_BREAK
  | ST_IF
  | ST_THEN
  | ST_ELSE
  | ST_ELSEIF
  | ST_FI
  | ST_PROB
  | ST_SKIP
  | ST_SCORE
  | ST_RETURN
  | ST_WHILE
  | ST_DO
  | ST_OD
  | PLUS
  | MULTIPLY
  | MINUS
  | COMMA
  | ASSIGN
  | TILDE
  | HAT
  | LPAREN
  | RPAREN
  | LBKT
  | RBKT
  | VBAR
  | NEWLINE
  | END_BLOCK_COMMENTING
  | EOF
  | SEMI_COLON
  | END
  | DOUBLE of ( ProgramAnalyser.Global.Numeric )
  | INT of ( System.Int32 )
  | ID of ( string )
type tokenId = 
    | TOKEN_ERROR
    | TOKEN_KW_CONFIG
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LANGLE
    | TOKEN_RANGLE
    | TOKEN_ST_SAMPLE
    | TOKEN_ST_BREAK
    | TOKEN_ST_IF
    | TOKEN_ST_THEN
    | TOKEN_ST_ELSE
    | TOKEN_ST_ELSEIF
    | TOKEN_ST_FI
    | TOKEN_ST_PROB
    | TOKEN_ST_SKIP
    | TOKEN_ST_SCORE
    | TOKEN_ST_RETURN
    | TOKEN_ST_WHILE
    | TOKEN_ST_DO
    | TOKEN_ST_OD
    | TOKEN_PLUS
    | TOKEN_MULTIPLY
    | TOKEN_MINUS
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_TILDE
    | TOKEN_HAT
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBKT
    | TOKEN_RBKT
    | TOKEN_VBAR
    | TOKEN_NEWLINE
    | TOKEN_END_BLOCK_COMMENTING
    | TOKEN_EOF
    | TOKEN_SEMI_COLON
    | TOKEN_END
    | TOKEN_DOUBLE
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startrandvars
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_optional_if_score_statement
    | NONTERM_optional_end_score_statement
    | NONTERM_distribution
    | NONTERM_assignment_list
    | NONTERM_assignment_statement
    | NONTERM_non_loop_statements
    | NONTERM_statement
    | NONTERM_in_loop_score_statement
    | NONTERM_if_statement
    | NONTERM_optional_elseif_seq
    | NONTERM_if_prob_statement
    | NONTERM_arith_expr
    | NONTERM_mul_level_expr
    | NONTERM_id_level_expr
    | NONTERM_number
    | NONTERM_bool_expr
    | NONTERM_and_bool_expr
    | NONTERM_bool_expr_element
    | NONTERM_bool_expr_constant
    | NONTERM_cmp_op
    | NONTERM_randvars
    | NONTERM_rv_decl_list
    | NONTERM_dist_arg
    | NONTERM_dist_arg_list
    | NONTERM_num_list
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val randvars : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( ProgramAnalyser.ParserSupport.RandomVarList ) 
val program : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> ( ProgramAnalyser.ParserSupport.Program       ) 
