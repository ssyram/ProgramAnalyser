// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open ProgramAnalyser.Global
open ProgramAnalyser.Utils
open ProgramAnalyser.ParserSupport
open ProgramAnalyser.Objects

# 13 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ERROR
  | KW_CONFIG
  | TRUE
  | FALSE
  | AND
  | OR
  | GE
  | LE
  | EQ
  | NEQ
  | LANGLE
  | RANGLE
  | ST_SAMPLE
  | ST_BREAK
  | ST_IF
  | ST_THEN
  | ST_ELSE
  | ST_ELSEIF
  | ST_FI
  | ST_PROB
  | ST_SKIP
  | ST_SCORE
  | ST_RETURN
  | ST_WHILE
  | ST_DO
  | ST_OD
  | PLUS
  | MULTIPLY
  | MINUS
  | COMMA
  | ASSIGN
  | TILDE
  | HAT
  | LPAREN
  | RPAREN
  | LBKT
  | RBKT
  | VBAR
  | NEWLINE
  | END_BLOCK_COMMENTING
  | EOF
  | SEMI_COLON
  | END
  | DOUBLE of ( ProgramAnalyser.Global.Numeric )
  | INT of ( System.Int32 )
  | ID of ( string )
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ERROR
    | TOKEN_KW_CONFIG
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LANGLE
    | TOKEN_RANGLE
    | TOKEN_ST_SAMPLE
    | TOKEN_ST_BREAK
    | TOKEN_ST_IF
    | TOKEN_ST_THEN
    | TOKEN_ST_ELSE
    | TOKEN_ST_ELSEIF
    | TOKEN_ST_FI
    | TOKEN_ST_PROB
    | TOKEN_ST_SKIP
    | TOKEN_ST_SCORE
    | TOKEN_ST_RETURN
    | TOKEN_ST_WHILE
    | TOKEN_ST_DO
    | TOKEN_ST_OD
    | TOKEN_PLUS
    | TOKEN_MULTIPLY
    | TOKEN_MINUS
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_TILDE
    | TOKEN_HAT
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBKT
    | TOKEN_RBKT
    | TOKEN_VBAR
    | TOKEN_NEWLINE
    | TOKEN_END_BLOCK_COMMENTING
    | TOKEN_EOF
    | TOKEN_SEMI_COLON
    | TOKEN_END
    | TOKEN_DOUBLE
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startrandvars
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_optional_if_score_statement
    | NONTERM_optional_end_score_statement
    | NONTERM_distribution
    | NONTERM_assignment_list
    | NONTERM_assignment_statement
    | NONTERM_non_loop_statements
    | NONTERM_statement
    | NONTERM_in_loop_score_statement
    | NONTERM_if_statement
    | NONTERM_optional_elseif_seq
    | NONTERM_if_prob_statement
    | NONTERM_arith_expr
    | NONTERM_mul_level_expr
    | NONTERM_id_level_expr
    | NONTERM_number
    | NONTERM_bool_expr
    | NONTERM_and_bool_expr
    | NONTERM_bool_expr_element
    | NONTERM_bool_expr_constant
    | NONTERM_cmp_op
    | NONTERM_randvars
    | NONTERM_rv_decl_list
    | NONTERM_dist_arg
    | NONTERM_dist_arg_list
    | NONTERM_num_list

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | ERROR  -> 0 
  | KW_CONFIG  -> 1 
  | TRUE  -> 2 
  | FALSE  -> 3 
  | AND  -> 4 
  | OR  -> 5 
  | GE  -> 6 
  | LE  -> 7 
  | EQ  -> 8 
  | NEQ  -> 9 
  | LANGLE  -> 10 
  | RANGLE  -> 11 
  | ST_SAMPLE  -> 12 
  | ST_BREAK  -> 13 
  | ST_IF  -> 14 
  | ST_THEN  -> 15 
  | ST_ELSE  -> 16 
  | ST_ELSEIF  -> 17 
  | ST_FI  -> 18 
  | ST_PROB  -> 19 
  | ST_SKIP  -> 20 
  | ST_SCORE  -> 21 
  | ST_RETURN  -> 22 
  | ST_WHILE  -> 23 
  | ST_DO  -> 24 
  | ST_OD  -> 25 
  | PLUS  -> 26 
  | MULTIPLY  -> 27 
  | MINUS  -> 28 
  | COMMA  -> 29 
  | ASSIGN  -> 30 
  | TILDE  -> 31 
  | HAT  -> 32 
  | LPAREN  -> 33 
  | RPAREN  -> 34 
  | LBKT  -> 35 
  | RBKT  -> 36 
  | VBAR  -> 37 
  | NEWLINE  -> 38 
  | END_BLOCK_COMMENTING  -> 39 
  | EOF  -> 40 
  | SEMI_COLON  -> 41 
  | END  -> 42 
  | DOUBLE _ -> 43 
  | INT _ -> 44 
  | ID _ -> 45 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ERROR 
  | 1 -> TOKEN_KW_CONFIG 
  | 2 -> TOKEN_TRUE 
  | 3 -> TOKEN_FALSE 
  | 4 -> TOKEN_AND 
  | 5 -> TOKEN_OR 
  | 6 -> TOKEN_GE 
  | 7 -> TOKEN_LE 
  | 8 -> TOKEN_EQ 
  | 9 -> TOKEN_NEQ 
  | 10 -> TOKEN_LANGLE 
  | 11 -> TOKEN_RANGLE 
  | 12 -> TOKEN_ST_SAMPLE 
  | 13 -> TOKEN_ST_BREAK 
  | 14 -> TOKEN_ST_IF 
  | 15 -> TOKEN_ST_THEN 
  | 16 -> TOKEN_ST_ELSE 
  | 17 -> TOKEN_ST_ELSEIF 
  | 18 -> TOKEN_ST_FI 
  | 19 -> TOKEN_ST_PROB 
  | 20 -> TOKEN_ST_SKIP 
  | 21 -> TOKEN_ST_SCORE 
  | 22 -> TOKEN_ST_RETURN 
  | 23 -> TOKEN_ST_WHILE 
  | 24 -> TOKEN_ST_DO 
  | 25 -> TOKEN_ST_OD 
  | 26 -> TOKEN_PLUS 
  | 27 -> TOKEN_MULTIPLY 
  | 28 -> TOKEN_MINUS 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_ASSIGN 
  | 31 -> TOKEN_TILDE 
  | 32 -> TOKEN_HAT 
  | 33 -> TOKEN_LPAREN 
  | 34 -> TOKEN_RPAREN 
  | 35 -> TOKEN_LBKT 
  | 36 -> TOKEN_RBKT 
  | 37 -> TOKEN_VBAR 
  | 38 -> TOKEN_NEWLINE 
  | 39 -> TOKEN_END_BLOCK_COMMENTING 
  | 40 -> TOKEN_EOF 
  | 41 -> TOKEN_SEMI_COLON 
  | 42 -> TOKEN_END 
  | 43 -> TOKEN_DOUBLE 
  | 44 -> TOKEN_INT 
  | 45 -> TOKEN_ID 
  | 48 -> TOKEN_end_of_input
  | 46 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startrandvars 
    | 1 -> NONTERM__startprogram 
    | 2 -> NONTERM_program 
    | 3 -> NONTERM_optional_if_score_statement 
    | 4 -> NONTERM_optional_if_score_statement 
    | 5 -> NONTERM_optional_end_score_statement 
    | 6 -> NONTERM_optional_end_score_statement 
    | 7 -> NONTERM_optional_end_score_statement 
    | 8 -> NONTERM_distribution 
    | 9 -> NONTERM_distribution 
    | 10 -> NONTERM_assignment_list 
    | 11 -> NONTERM_assignment_list 
    | 12 -> NONTERM_assignment_statement 
    | 13 -> NONTERM_non_loop_statements 
    | 14 -> NONTERM_non_loop_statements 
    | 15 -> NONTERM_statement 
    | 16 -> NONTERM_statement 
    | 17 -> NONTERM_statement 
    | 18 -> NONTERM_statement 
    | 19 -> NONTERM_statement 
    | 20 -> NONTERM_statement 
    | 21 -> NONTERM_in_loop_score_statement 
    | 22 -> NONTERM_if_statement 
    | 23 -> NONTERM_optional_elseif_seq 
    | 24 -> NONTERM_optional_elseif_seq 
    | 25 -> NONTERM_if_prob_statement 
    | 26 -> NONTERM_arith_expr 
    | 27 -> NONTERM_arith_expr 
    | 28 -> NONTERM_arith_expr 
    | 29 -> NONTERM_mul_level_expr 
    | 30 -> NONTERM_mul_level_expr 
    | 31 -> NONTERM_id_level_expr 
    | 32 -> NONTERM_id_level_expr 
    | 33 -> NONTERM_id_level_expr 
    | 34 -> NONTERM_number 
    | 35 -> NONTERM_number 
    | 36 -> NONTERM_number 
    | 37 -> NONTERM_number 
    | 38 -> NONTERM_bool_expr 
    | 39 -> NONTERM_and_bool_expr 
    | 40 -> NONTERM_and_bool_expr 
    | 41 -> NONTERM_bool_expr_element 
    | 42 -> NONTERM_bool_expr_element 
    | 43 -> NONTERM_bool_expr_constant 
    | 44 -> NONTERM_bool_expr_constant 
    | 45 -> NONTERM_bool_expr_constant 
    | 46 -> NONTERM_cmp_op 
    | 47 -> NONTERM_cmp_op 
    | 48 -> NONTERM_cmp_op 
    | 49 -> NONTERM_cmp_op 
    | 50 -> NONTERM_randvars 
    | 51 -> NONTERM_rv_decl_list 
    | 52 -> NONTERM_rv_decl_list 
    | 53 -> NONTERM_dist_arg 
    | 54 -> NONTERM_dist_arg 
    | 55 -> NONTERM_dist_arg_list 
    | 56 -> NONTERM_dist_arg_list 
    | 57 -> NONTERM_num_list 
    | 58 -> NONTERM_num_list 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 48 
let _fsyacc_tagOfErrorTerminal = 46

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ERROR  -> "ERROR" 
  | KW_CONFIG  -> "KW_CONFIG" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LANGLE  -> "LANGLE" 
  | RANGLE  -> "RANGLE" 
  | ST_SAMPLE  -> "ST_SAMPLE" 
  | ST_BREAK  -> "ST_BREAK" 
  | ST_IF  -> "ST_IF" 
  | ST_THEN  -> "ST_THEN" 
  | ST_ELSE  -> "ST_ELSE" 
  | ST_ELSEIF  -> "ST_ELSEIF" 
  | ST_FI  -> "ST_FI" 
  | ST_PROB  -> "ST_PROB" 
  | ST_SKIP  -> "ST_SKIP" 
  | ST_SCORE  -> "ST_SCORE" 
  | ST_RETURN  -> "ST_RETURN" 
  | ST_WHILE  -> "ST_WHILE" 
  | ST_DO  -> "ST_DO" 
  | ST_OD  -> "ST_OD" 
  | PLUS  -> "PLUS" 
  | MULTIPLY  -> "MULTIPLY" 
  | MINUS  -> "MINUS" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | TILDE  -> "TILDE" 
  | HAT  -> "HAT" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBKT  -> "LBKT" 
  | RBKT  -> "RBKT" 
  | VBAR  -> "VBAR" 
  | NEWLINE  -> "NEWLINE" 
  | END_BLOCK_COMMENTING  -> "END_BLOCK_COMMENTING" 
  | EOF  -> "EOF" 
  | SEMI_COLON  -> "SEMI_COLON" 
  | END  -> "END" 
  | DOUBLE _ -> "DOUBLE" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ERROR  -> (null : System.Object) 
  | KW_CONFIG  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LANGLE  -> (null : System.Object) 
  | RANGLE  -> (null : System.Object) 
  | ST_SAMPLE  -> (null : System.Object) 
  | ST_BREAK  -> (null : System.Object) 
  | ST_IF  -> (null : System.Object) 
  | ST_THEN  -> (null : System.Object) 
  | ST_ELSE  -> (null : System.Object) 
  | ST_ELSEIF  -> (null : System.Object) 
  | ST_FI  -> (null : System.Object) 
  | ST_PROB  -> (null : System.Object) 
  | ST_SKIP  -> (null : System.Object) 
  | ST_SCORE  -> (null : System.Object) 
  | ST_RETURN  -> (null : System.Object) 
  | ST_WHILE  -> (null : System.Object) 
  | ST_DO  -> (null : System.Object) 
  | ST_OD  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MULTIPLY  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | TILDE  -> (null : System.Object) 
  | HAT  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBKT  -> (null : System.Object) 
  | RBKT  -> (null : System.Object) 
  | VBAR  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | END_BLOCK_COMMENTING  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | SEMI_COLON  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | DOUBLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;0us;65535us;1us;65535us;2us;3us;1us;65535us;14us;15us;1us;65535us;13us;14us;2us;65535us;34us;35us;127us;128us;2us;65535us;2us;4us;50us;51us;8us;65535us;2us;49us;10us;60us;50us;49us;56us;60us;70us;60us;76us;60us;83us;60us;85us;60us;6us;65535us;10us;11us;56us;57us;70us;71us;76us;77us;83us;84us;85us;86us;6us;65535us;10us;55us;56us;55us;70us;55us;76us;55us;83us;55us;85us;55us;6us;65535us;10us;63us;56us;63us;70us;63us;76us;63us;83us;63us;85us;63us;6us;65535us;10us;61us;56us;61us;70us;61us;76us;61us;83us;61us;85us;61us;2us;65535us;71us;72us;77us;78us;6us;65535us;10us;62us;56us;62us;70us;62us;76us;62us;83us;62us;85us;62us;16us;65535us;5us;112us;8us;112us;19us;112us;34us;40us;36us;37us;53us;54us;65us;66us;68us;112us;74us;112us;80us;81us;89us;90us;91us;92us;98us;100us;99us;101us;109us;112us;113us;114us;17us;65535us;5us;88us;8us;88us;19us;88us;34us;88us;36us;88us;53us;88us;65us;88us;68us;88us;74us;88us;80us;88us;89us;88us;91us;88us;94us;95us;98us;88us;99us;88us;109us;88us;113us;88us;17us;65535us;5us;93us;8us;93us;19us;93us;34us;93us;36us;93us;53us;93us;65us;93us;68us;93us;74us;93us;80us;93us;89us;93us;91us;93us;94us;93us;98us;93us;99us;93us;109us;93us;113us;93us;19us;65535us;5us;97us;8us;97us;19us;97us;34us;97us;36us;97us;45us;130us;53us;97us;65us;97us;68us;97us;74us;97us;80us;97us;89us;97us;91us;97us;94us;97us;98us;97us;99us;97us;109us;97us;113us;97us;134us;130us;6us;65535us;5us;6us;8us;9us;19us;20us;68us;69us;74us;75us;99us;118us;6us;65535us;5us;108us;8us;108us;19us;108us;68us;108us;74us;108us;99us;108us;7us;65535us;5us;111us;8us;111us;19us;111us;68us;111us;74us;111us;99us;111us;109us;110us;7us;65535us;5us;115us;8us;115us;19us;115us;68us;115us;74us;115us;99us;115us;109us;115us;2us;65535us;101us;113us;112us;113us;1us;65535us;0us;1us;2us;65535us;0us;124us;128us;129us;2us;65535us;45us;133us;134us;133us;2us;65535us;45us;46us;134us;135us;0us;65535us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;2us;4us;6us;8us;11us;14us;23us;30us;37us;44us;51us;54us;61us;78us;96us;114us;134us;141us;148us;156us;164us;167us;169us;172us;175us;178us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;2us;6us;7us;2us;6us;7us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;1us;7us;1us;7us;1us;7us;2us;8us;9us;3us;8us;9us;31us;2us;8us;9us;1us;8us;1us;8us;1us;9us;2us;10us;11us;2us;10us;11us;1us;11us;1us;12us;1us;12us;1us;12us;2us;13us;14us;1us;14us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;1us;19us;1us;20us;1us;21us;1us;21us;1us;21us;1us;21us;2us;22us;25us;1us;22us;1us;22us;1us;22us;1us;22us;1us;22us;1us;24us;1us;24us;1us;24us;1us;24us;1us;24us;1us;25us;1us;25us;1us;25us;1us;25us;1us;25us;1us;25us;1us;25us;1us;25us;1us;25us;3us;26us;27us;28us;1us;26us;1us;26us;1us;27us;1us;27us;2us;29us;30us;1us;29us;1us;29us;1us;31us;1us;32us;1us;33us;2us;33us;45us;1us;33us;2us;33us;41us;1us;33us;1us;34us;1us;35us;2us;36us;37us;1us;36us;1us;37us;2us;38us;39us;1us;39us;1us;39us;1us;40us;1us;41us;1us;41us;1us;41us;1us;42us;1us;43us;1us;44us;1us;45us;1us;45us;1us;46us;1us;47us;1us;48us;1us;49us;1us;50us;1us;52us;1us;52us;1us;52us;1us;52us;1us;52us;2us;53us;54us;1us;54us;1us;54us;2us;55us;56us;1us;56us;1us;56us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;22us;24us;26us;28us;30us;32us;34us;36us;38us;40us;42us;44us;46us;48us;50us;52us;54us;56us;58us;60us;62us;64us;66us;69us;72us;74us;76us;78us;80us;82us;84us;86us;88us;91us;95us;98us;100us;102us;104us;107us;110us;112us;114us;116us;118us;121us;123us;125us;127us;129us;131us;133us;135us;137us;139us;141us;143us;145us;148us;150us;152us;154us;156us;158us;160us;162us;164us;166us;168us;170us;172us;174us;176us;178us;180us;182us;184us;186us;190us;192us;194us;196us;198us;201us;203us;205us;207us;209us;211us;214us;216us;219us;221us;223us;225us;228us;230us;232us;235us;237us;239us;241us;243us;245us;247us;249us;251us;253us;255us;257us;259us;261us;263us;265us;267us;269us;271us;273us;275us;277us;280us;282us;284us;287us;289us;|]
let _fsyacc_action_rows = 136
let _fsyacc_actionTableElements = [|1us;16435us;45us;125us;0us;49152us;1us;32768us;45us;52us;0us;49152us;1us;32768us;35us;5us;7us;32768us;2us;116us;3us;117us;28us;105us;33us;99us;43us;103us;44us;104us;45us;96us;1us;32768us;36us;7us;1us;32768us;23us;8us;7us;32768us;2us;116us;3us;117us;28us;105us;33us;99us;43us;103us;44us;104us;45us;96us;1us;32768us;24us;10us;5us;32768us;13us;59us;14us;68us;20us;58us;21us;64us;45us;52us;1us;32768us;25us;12us;1us;32768us;41us;13us;1us;16389us;21us;33us;1us;16387us;14us;19us;1us;32768us;22us;16us;1us;32768us;45us;17us;1us;32768us;42us;18us;0us;16386us;7us;32768us;2us;116us;3us;117us;28us;105us;33us;99us;43us;103us;44us;104us;45us;96us;1us;32768us;15us;21us;1us;32768us;21us;22us;1us;32768us;33us;23us;1us;32768us;44us;24us;1us;32768us;34us;25us;1us;32768us;16us;26us;1us;32768us;21us;27us;1us;32768us;33us;28us;1us;32768us;44us;29us;1us;32768us;34us;30us;1us;32768us;18us;31us;1us;32768us;41us;32us;0us;16388us;1us;32768us;33us;34us;5us;32768us;28us;105us;33us;98us;43us;103us;44us;104us;45us;44us;1us;32768us;29us;36us;5us;32768us;28us;105us;33us;98us;43us;103us;44us;104us;45us;96us;1us;32768us;34us;38us;1us;32768us;41us;39us;0us;16390us;1us;32768us;34us;41us;1us;32768us;41us;42us;0us;16391us;1us;32768us;33us;45us;1us;16415us;33us;45us;4us;32768us;28us;105us;34us;48us;43us;103us;44us;104us;1us;32768us;34us;47us;0us;16392us;0us;16393us;1us;32768us;41us;50us;1us;16394us;45us;52us;0us;16395us;1us;32768us;30us;53us;5us;32768us;28us;105us;33us;98us;43us;103us;44us;104us;45us;96us;0us;16396us;1us;16397us;41us;56us;5us;32768us;13us;59us;14us;68us;20us;58us;21us;64us;45us;52us;0us;16398us;0us;16399us;0us;16400us;0us;16401us;0us;16402us;0us;16403us;0us;16404us;1us;32768us;33us;65us;5us;32768us;28us;105us;33us;98us;43us;103us;44us;104us;45us;96us;1us;32768us;34us;67us;0us;16405us;8us;32768us;2us;116us;3us;117us;19us;79us;28us;105us;33us;99us;43us;103us;44us;104us;45us;96us;1us;32768us;15us;70us;5us;32768us;13us;59us;14us;68us;20us;58us;21us;64us;45us;52us;1us;16407us;17us;74us;1us;32768us;18us;73us;0us;16406us;7us;32768us;2us;116us;3us;117us;28us;105us;33us;99us;43us;103us;44us;104us;45us;96us;1us;32768us;15us;76us;5us;32768us;13us;59us;14us;68us;20us;58us;21us;64us;45us;52us;1us;16407us;17us;74us;0us;16408us;1us;32768us;33us;80us;5us;32768us;28us;105us;33us;98us;43us;103us;44us;104us;45us;96us;1us;32768us;34us;82us;1us;32768us;15us;83us;5us;32768us;13us;59us;14us;68us;20us;58us;21us;64us;45us;52us;1us;32768us;16us;85us;5us;32768us;13us;59us;14us;68us;20us;58us;21us;64us;45us;52us;1us;32768us;18us;87us;0us;16409us;2us;16412us;26us;89us;28us;91us;5us;32768us;28us;105us;33us;98us;43us;103us;44us;104us;45us;96us;0us;16410us;5us;32768us;28us;105us;33us;98us;43us;103us;44us;104us;45us;96us;0us;16411us;1us;16414us;27us;94us;5us;32768us;28us;105us;33us;98us;43us;103us;44us;104us;45us;96us;0us;16413us;0us;16415us;0us;16416us;5us;32768us;28us;105us;33us;98us;43us;103us;44us;104us;45us;96us;7us;32768us;2us;116us;3us;117us;28us;105us;33us;99us;43us;103us;44us;104us;45us;96us;1us;32768us;34us;102us;5us;32768us;6us;121us;7us;120us;10us;122us;11us;123us;34us;102us;0us;16417us;0us;16418us;0us;16419us;2us;32768us;43us;106us;44us;107us;0us;16420us;0us;16421us;1us;16422us;4us;109us;7us;32768us;2us;116us;3us;117us;28us;105us;33us;99us;43us;103us;44us;104us;45us;96us;0us;16423us;0us;16424us;4us;32768us;6us;121us;7us;120us;10us;122us;11us;123us;5us;32768us;28us;105us;33us;98us;43us;103us;44us;104us;45us;96us;0us;16425us;0us;16426us;0us;16427us;0us;16428us;1us;32768us;34us;119us;0us;16429us;0us;16430us;0us;16431us;0us;16432us;0us;16433us;0us;16434us;1us;32768us;31us;126us;1us;32768us;12us;127us;1us;32768us;45us;43us;1us;16435us;45us;125us;0us;16436us;1us;16437us;32us;131us;1us;32768us;44us;132us;0us;16438us;1us;16439us;29us;134us;3us;32768us;28us;105us;43us;103us;44us;104us;0us;16440us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;5us;6us;8us;16us;18us;20us;28us;30us;36us;38us;40us;42us;44us;46us;48us;50us;51us;59us;61us;63us;65us;67us;69us;71us;73us;75us;77us;79us;81us;83us;84us;86us;92us;94us;100us;102us;104us;105us;107us;109us;110us;112us;114us;119us;121us;122us;123us;125us;127us;128us;130us;136us;137us;139us;145us;146us;147us;148us;149us;150us;151us;152us;154us;160us;162us;163us;172us;174us;180us;182us;184us;185us;193us;195us;201us;203us;204us;206us;212us;214us;216us;222us;224us;230us;232us;233us;236us;242us;243us;249us;250us;252us;258us;259us;260us;261us;267us;275us;277us;283us;284us;285us;286us;289us;290us;291us;293us;301us;302us;303us;308us;314us;315us;316us;317us;318us;320us;321us;322us;323us;324us;325us;326us;328us;330us;332us;334us;335us;337us;339us;340us;342us;346us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;15us;0us;14us;0us;7us;5us;4us;3us;2us;3us;3us;1us;3us;1us;1us;1us;1us;1us;1us;4us;6us;0us;5us;10us;3us;3us;1us;3us;1us;1us;1us;3us;1us;1us;2us;2us;1us;3us;1us;3us;1us;1us;1us;3us;1us;1us;1us;1us;1us;0us;5us;1us;3us;1us;3us;1us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;3us;3us;4us;4us;4us;5us;5us;6us;6us;7us;8us;8us;9us;9us;9us;9us;9us;9us;10us;11us;12us;12us;13us;14us;14us;14us;15us;15us;16us;16us;16us;17us;17us;17us;17us;18us;19us;19us;20us;20us;21us;21us;21us;22us;22us;22us;22us;23us;24us;24us;25us;25us;26us;26us;27us;27us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;49152us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16386us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16388us;65535us;65535us;65535us;65535us;65535us;65535us;16390us;65535us;65535us;16391us;65535us;65535us;65535us;65535us;16392us;16393us;65535us;65535us;16395us;65535us;65535us;16396us;65535us;65535us;16398us;16399us;16400us;16401us;16402us;16403us;16404us;65535us;65535us;65535us;16405us;65535us;65535us;65535us;65535us;65535us;16406us;65535us;65535us;65535us;65535us;16408us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16409us;65535us;65535us;16410us;65535us;16411us;65535us;65535us;16413us;16415us;16416us;65535us;65535us;65535us;65535us;16417us;16418us;16419us;65535us;16420us;16421us;65535us;65535us;16423us;16424us;65535us;65535us;16425us;16426us;16427us;16428us;65535us;16429us;16430us;16431us;16432us;16433us;16434us;65535us;65535us;65535us;65535us;16436us;65535us;65535us;16438us;65535us;65535us;16440us;|]
let _fsyacc_reductions ()  =    [| 
# 423 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  ProgramAnalyser.ParserSupport.RandomVarList  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startrandvars));
# 432 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  ProgramAnalyser.ParserSupport.Program        in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprogram));
# 441 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_assignment_list in
            let _3 = parseState.GetInput(3) :?> 'gentype_bool_expr in
            let _6 = parseState.GetInput(6) :?> 'gentype_bool_expr in
            let _8 = parseState.GetInput(8) :?> 'gentype_non_loop_statements in
            let _11 = parseState.GetInput(11) :?> 'gentype_optional_end_score_statement in
            let _12 = parseState.GetInput(12) :?> 'gentype_optional_if_score_statement in
            let _14 = parseState.GetInput(14) :?>  string  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                               mkProgram (_1, _3, _6, _8, _11, _12, Variable _14) 
                   )
# 41 "Parser.fsy"
                 :  ProgramAnalyser.ParserSupport.Program       ));
# 458 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                             None 
                   )
# 44 "Parser.fsy"
                 : 'gentype_optional_if_score_statement));
# 468 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bool_expr in
            let _6 = parseState.GetInput(6) :?>  System.Int32  in
            let _11 = parseState.GetInput(11) :?>  System.Int32  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                           
                           shapeOptionalIfScoreStatement _2 _6 _11
                       
                   )
# 49 "Parser.fsy"
                 : 'gentype_optional_if_score_statement));
# 483 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                             None 
                   )
# 54 "Parser.fsy"
                 : 'gentype_optional_end_score_statement));
# 493 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_distribution in
            let _5 = parseState.GetInput(5) :?> 'gentype_arith_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                                                           Some (ScoreDist (_3, _5)) 
                   )
# 55 "Parser.fsy"
                 : 'gentype_optional_end_score_statement));
# 505 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_arith_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                                        Some (ScoreArith _3) 
                   )
# 56 "Parser.fsy"
                 : 'gentype_optional_end_score_statement));
# 516 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            let _3 = parseState.GetInput(3) :?> 'gentype_dist_arg_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                          toDistribution _1 _3 
                   )
# 59 "Parser.fsy"
                 : 'gentype_distribution));
# 528 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                            toDistribution _1 [] 
                   )
# 60 "Parser.fsy"
                 : 'gentype_distribution));
# 539 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_assignment_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                           [_1] 
                   )
# 63 "Parser.fsy"
                 : 'gentype_assignment_list));
# 550 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_assignment_statement in
            let _3 = parseState.GetInput(3) :?> 'gentype_assignment_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                                           _1 :: _3 
                   )
# 64 "Parser.fsy"
                 : 'gentype_assignment_list));
# 562 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            let _3 = parseState.GetInput(3) :?> 'gentype_arith_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                              STAssn (Variable _1, _3) 
                   )
# 67 "Parser.fsy"
                 : 'gentype_assignment_statement));
# 574 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                     [_1] 
                   )
# 70 "Parser.fsy"
                 : 'gentype_non_loop_statements));
# 585 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_statement in
            let _3 = parseState.GetInput(3) :?> 'gentype_non_loop_statements in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                                    _1 :: _3 
                   )
# 71 "Parser.fsy"
                 : 'gentype_non_loop_statements));
# 597 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                   STSkip 
                   )
# 74 "Parser.fsy"
                 : 'gentype_statement));
# 607 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                    STBreak 
                   )
# 75 "Parser.fsy"
                 : 'gentype_statement));
# 617 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_assignment_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                _1 
                   )
# 76 "Parser.fsy"
                 : 'gentype_statement));
# 628 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_if_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                        _1 
                   )
# 77 "Parser.fsy"
                 : 'gentype_statement));
# 639 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_if_prob_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                             _1 
                   )
# 78 "Parser.fsy"
                 : 'gentype_statement));
# 650 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_in_loop_score_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                   _1 
                   )
# 79 "Parser.fsy"
                 : 'gentype_statement));
# 661 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_arith_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                           STInLoopScore _3 
                   )
# 82 "Parser.fsy"
                 : 'gentype_in_loop_score_statement));
# 672 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bool_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_non_loop_statements in
            let _5 = parseState.GetInput(5) :?> 'gentype_optional_elseif_seq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                               STIfBool ((_2, _4) :: _5) 
                   )
# 87 "Parser.fsy"
                 : 'gentype_if_statement));
# 685 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                             [] 
                   )
# 90 "Parser.fsy"
                 : 'gentype_optional_elseif_seq));
# 695 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bool_expr in
            let _4 = parseState.GetInput(4) :?> 'gentype_non_loop_statements in
            let _5 = parseState.GetInput(5) :?> 'gentype_optional_elseif_seq in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                                                               (_2, _4) :: _5 
                   )
# 91 "Parser.fsy"
                 : 'gentype_optional_elseif_seq));
# 708 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _4 = parseState.GetInput(4) :?> 'gentype_arith_expr in
            let _7 = parseState.GetInput(7) :?> 'gentype_non_loop_statements in
            let _9 = parseState.GetInput(9) :?> 'gentype_non_loop_statements in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                               STIfProb (_4, _7, _9) 
                   )
# 96 "Parser.fsy"
                 : 'gentype_if_prob_statement));
# 721 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_mul_level_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_arith_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                          AOperation (OpAdd, [ _1; _3 ]) 
                   )
# 99 "Parser.fsy"
                 : 'gentype_arith_expr));
# 733 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_mul_level_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_arith_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                           AOperation (OpMinus, [ _1; _3 ]) 
                   )
# 100 "Parser.fsy"
                 : 'gentype_arith_expr));
# 745 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_mul_level_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                          _1 
                   )
# 101 "Parser.fsy"
                 : 'gentype_arith_expr));
# 756 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_id_level_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_mul_level_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                                 AOperation (OpMul, [ _1; _3 ]) 
                   )
# 104 "Parser.fsy"
                 : 'gentype_mul_level_expr));
# 768 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_id_level_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                         _1 
                   )
# 105 "Parser.fsy"
                 : 'gentype_mul_level_expr));
# 779 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                              AVar (Variable _1) 
                   )
# 108 "Parser.fsy"
                 : 'gentype_id_level_expr));
# 790 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_number in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                  AConst _1 
                   )
# 109 "Parser.fsy"
                 : 'gentype_id_level_expr));
# 801 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_arith_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                    _2 
                   )
# 110 "Parser.fsy"
                 : 'gentype_id_level_expr));
# 812 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  ProgramAnalyser.Global.Numeric  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                             _1 
                   )
# 113 "Parser.fsy"
                 : 'gentype_number));
# 823 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  System.Int32  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                             ProgramAnalyser.Global.Numeric _1 
                   )
# 114 "Parser.fsy"
                 : 'gentype_number));
# 834 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?>  ProgramAnalyser.Global.Numeric  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                             -_2 
                   )
# 115 "Parser.fsy"
                 : 'gentype_number));
# 845 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?>  System.Int32  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                             ProgramAnalyser.Global.Numeric (-_2) 
                   )
# 116 "Parser.fsy"
                 : 'gentype_number));
# 856 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_and_bool_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                         _1 
                   )
# 119 "Parser.fsy"
                 : 'gentype_bool_expr));
# 867 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_and_bool_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_bool_expr_element in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                               BAnd (_1, _3) 
                   )
# 121 "Parser.fsy"
                 : 'gentype_and_bool_expr));
# 879 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bool_expr_element in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                             _1 
                   )
# 122 "Parser.fsy"
                 : 'gentype_and_bool_expr));
# 890 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_arith_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_cmp_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_arith_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                        BCompare (_2, _1, _3) 
                   )
# 124 "Parser.fsy"
                 : 'gentype_bool_expr_element));
# 903 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bool_expr_constant in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                              _1 
                   )
# 125 "Parser.fsy"
                 : 'gentype_bool_expr_element));
# 914 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                BTrue 
                   )
# 127 "Parser.fsy"
                 : 'gentype_bool_expr_constant));
# 924 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                 BFalse 
                   )
# 128 "Parser.fsy"
                 : 'gentype_bool_expr_constant));
# 934 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bool_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                   _2 
                   )
# 129 "Parser.fsy"
                 : 'gentype_bool_expr_constant));
# 945 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                              CmpLe 
                   )
# 131 "Parser.fsy"
                 : 'gentype_cmp_op));
# 955 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                              CmpGe 
                   )
# 132 "Parser.fsy"
                 : 'gentype_cmp_op));
# 965 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                  CmpLt 
                   )
# 133 "Parser.fsy"
                 : 'gentype_cmp_op));
# 975 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                  CmpGt 
                   )
# 134 "Parser.fsy"
                 : 'gentype_cmp_op));
# 985 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_rv_decl_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                      RandomVarList _1 
                   )
# 137 "Parser.fsy"
                 :  ProgramAnalyser.ParserSupport.RandomVarList ));
# 996 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                             [] 
                   )
# 140 "Parser.fsy"
                 : 'gentype_rv_decl_list));
# 1006 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  string  in
            let _4 = parseState.GetInput(4) :?> 'gentype_distribution in
            let _5 = parseState.GetInput(5) :?> 'gentype_rv_decl_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                                        (Variable _1, _4) :: _5 
                   )
# 141 "Parser.fsy"
                 : 'gentype_rv_decl_list));
# 1019 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_number in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                  DANumber _1 
                   )
# 144 "Parser.fsy"
                 : 'gentype_dist_arg));
# 1030 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_number in
            let _3 = parseState.GetInput(3) :?>  System.Int32  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                          DAExp (_1, _3) 
                   )
# 145 "Parser.fsy"
                 : 'gentype_dist_arg));
# 1042 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_dist_arg in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                    [_1] 
                   )
# 148 "Parser.fsy"
                 : 'gentype_dist_arg_list));
# 1053 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_dist_arg in
            let _3 = parseState.GetInput(3) :?> 'gentype_dist_arg_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                                        _1 :: _3 
                   )
# 149 "Parser.fsy"
                 : 'gentype_dist_arg_list));
# 1065 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_number in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                  [_1] 
                   )
# 152 "Parser.fsy"
                 : 'gentype_num_list));
# 1076 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_number in
            let _3 = parseState.GetInput(3) :?> 'gentype_num_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                 _1 :: _3 
                   )
# 153 "Parser.fsy"
                 : 'gentype_num_list));
|]
# 1089 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 49;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let randvars lexer lexbuf :  ProgramAnalyser.ParserSupport.RandomVarList  =
    engine lexer lexbuf 0 :?> _
let program lexer lexbuf :  ProgramAnalyser.ParserSupport.Program        =
    engine lexer lexbuf 2 :?> _
